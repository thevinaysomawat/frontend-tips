{"pageProps":{"content":"\r\nQuite often, we use the `map` function to transform each item of an array into a new one. However, it's common to see an issue if we don't pass the parameter to the mapper function.\r\n\r\nFor example, the following code converts each item of array into a number:\r\n\r\n```js\r\n['1', '2', '3', '4', '5'].map((v) => parseInt(v));\r\n\r\n// [1, 2, 3, 4, 5]\r\n```\r\n\r\nHowever, the result isn't correct if we shorten it as below:\r\n\r\n```js\r\n['1', '2', '3', '4', '5'].map(parseInt);\r\n\r\n// [1, NaN, NaN, NaN, NaN]\r\n```\r\n\r\nThe issue is caused by the fact that the mapper function accepts three parameters which are the array item, index, and the array.\r\nCalling `.map(parseInt)` means that we pass the item index to `parseInt` as the second parameter. As a result, we will see `NaN`.\r\n\r\nThis leads to a requirement of building a function that [accepts only the first parameter](https://1loc.dev/#create-a-function-that-accepts-a-single-argument), and ignore the remaining parameters.\r\n\r\n```js\r\nconst unary = (fn) => (params) => fn(params);\r\n```\r\n\r\nThe `unary` function creates a wrapper of a function, and ignores all parameters except the first one. With that function in our hand, we can pass the mapper to the `map` function like this:\r\n\r\n```js\r\n['1', '2', '3', '4', '5'].map(unary(parseInt));\r\n\r\n// [1, 2, 3, 4, 5]\r\n```\r\n\r\n### See also\r\n\r\n-   [Accept any numbers of parameters](/accept-any-numbers-of-parameters.html)\r\n","frontMatter":{"title":"Create a function that accepts a single parameter","category":"Tip","date":"2021-03-15 11:56:00 +7","topics":"JavaScript"},"prevPost":{"slug":"create-a-file-of-any-size","title":"Create a file of any size"},"nextPost":{"slug":"create-a-line-on-sides-heading","title":"Create a line-on-sides heading"}},"__N_SSG":true}