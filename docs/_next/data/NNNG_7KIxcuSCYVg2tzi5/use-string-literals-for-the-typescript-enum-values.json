{"pageProps":{"content":"\r\nLet's say that we have the following TypeScript enum:\r\n\r\n```js\r\nenum Theme {\r\n    DEFAULT,\r\n    LIGHT,\r\n    DARK,\r\n}\r\n```\r\n\r\nIf you don't set the values for enum, they will be set to incremental numbers by default.\r\n\r\nSo `Theme.DEFAULT`, `Theme.LIGHT` and `Theme.DARK` will take the value of 0, 1, 2, respectively. It is more hard to debug:\r\n\r\n```js\r\nconsole.log(Theme.DARK); // 2\r\n```\r\n\r\nEven if we set the number for enum values, it is still possible for us to set an invalid value for a variable whose type is the enum:\r\n\r\n```js\r\nenum Theme {\r\n    DEFAULT = 0,\r\n    LIGHT = 1,\r\n    DARK = 2,\r\n}\r\n\r\n// TypeScript doesn't throw errors\r\nconst theme: Theme.DEFAULT = 3;\r\n```\r\n\r\nDue to these reasons, it's advised to use string literals for the enum values. The `Theme` enum should look like as follow:\r\n\r\n```js\r\nenum Theme {\r\n    DEFAULT = 'Default',\r\n    LIGHT = 'Light',\r\n    DARK = 'Dark',\r\n}\r\n\r\nconsole.log(Theme.DARK);                // 'Dark'\r\nlet theme: Theme.DEFAULT = 'Default';   // ERROR\r\n```\r\n","frontMatter":{"title":"Use string literals for the TypeScript enum values","category":"Best practice","date":"2021-02-22 23:28:00 +7","topics":"TypeScript"},"prevPost":{"slug":"use-short-circuits-conditionals","title":"Use short-circuits conditionals"},"nextPost":{"slug":"use-template-literal-to-concatenate-strings","title":"Use template literal to concatenate strings"}},"__N_SSG":true}