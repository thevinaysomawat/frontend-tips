{"pageProps":{"content":"\r\nJavaScript has some built-in functions that accept a list of individuals arguments, but passing an array doen't work. `Math.max`, `Math.min` are some of them.\r\n\r\nThey are used to find the [biggest](https://1loc.dev/#find-the-maximum-item-of-an-array) and [smallest numbers](https://1loc.dev/#find-the-minimum-item-of-an-array) in the passed arguments, repectively.\r\n\r\n```js\r\nMath.max(1, 2, 3, 4); // 4\r\n\r\n// Doesn't work because it treats the array as a single parameter\r\n// That parameter isn't a number, so the function returns `NaN`\r\nMath.max([1, 2, 3, 4]); // NaN\r\n```\r\n\r\nIf we want to pass a dynamic array of numbers, then the ES6 spread operator (`...`) can help. It turns a varible to a list of individual parameters:\r\n\r\n```js\r\nconst array = [1, 2, 3, 4];\r\nMath.max(...array); // 4\r\n```\r\n\r\nJavaScript engines implemented by different browsers have the limited number of parameters. Using the `...` operator doesn't work if you have a big array. Using the `reduce` method doesn't have this problem.\r\n\r\n```js\r\nconst max = (arr) => arr.reduce((a, b) => Math.max(a, b));\r\nmax([1, 2, 3, 4]); // 4\r\n```\r\n\r\n### See also\r\n\r\n-   [Accept any numbers of parameters](/accept-any-numbers-of-parameters.html)\r\n","frontMatter":{"title":"Pass an array as function arguments","category":"Tip","date":"2021-03-03 09:48:00 +7","topics":"JavaScript"},"prevPost":{"slug":"override-the-behavior-of-instanceof","title":"Override the behavior of instanceof"},"nextPost":{"slug":"persist-console-logs-between-page-refreshes","title":"Persist Console logs between page refreshes"}},"__N_SSG":true}