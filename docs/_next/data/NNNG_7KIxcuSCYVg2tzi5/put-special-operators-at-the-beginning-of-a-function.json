{"pageProps":{"content":"\r\nUsually, we can invoke a function by using the form of Immediately Invoked Function Expression (IIFE).\r\n\r\n```js\r\n(function (a, b) {\r\n    return a + b;\r\n})(4, 2);\r\n\r\n// 6\r\n```\r\n\r\nDo you know that we get the same result if we omit the parentheses and put + at the beginning as follow:\r\n\r\n```js\r\n+(function (a, b) {\r\n    return a + b;\r\n})(4, 2);\r\n\r\n// 6\r\n```\r\n\r\nIt works because putting `+` at the beginning of function declaration will turn it to an expression, and passing the parameters with `()` at the end will invoke the expression.\r\nIt is rare to see that code in development, but it is used in the minifications to save the file size.\r\nIn addition to `+`, you can use other operators such as `-`, `!`, `~` and void in the similar way to invoke a function:\r\n\r\n```js\r\n-function() { ... }();\r\n!function() { ... }();\r\n~function() { ... }();\r\nvoid function() { ... }();\r\n```\r\n\r\nNote that the return value could be different from the original function, for example:\r\n\r\n```js\r\n!(function () {\r\n    return false;\r\n})(); // true\r\n```\r\n","frontMatter":{"title":"Put special operators at the beginning of a function","category":"Trick","date":"2021-02-23 08:19:00 +7","topics":"JavaScript"},"prevPost":{"slug":"pure-collapsible-element","title":"Pure collapsible element"},"nextPost":{"slug":"quick-query-elements-in-the-console","title":"Quick query elements in the Console"}},"__N_SSG":true}