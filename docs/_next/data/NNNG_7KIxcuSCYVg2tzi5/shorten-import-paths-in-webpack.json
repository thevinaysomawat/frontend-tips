{"pageProps":{"content":"\r\nSay you're using [Webpack](https://webpack.js.org) to bundle your application.\r\nIf you think that using a relative path when importing a given file is ugly and hard to maintain when changing the directory structure:\r\n\r\n```js\r\nimport { formatDate } from '../../../helpers/formatDate';\r\n```\r\n\r\nThen using the aliases is one of the solutions. Webpack allows to map a prefix of import path to a given path. For example, we would like to map all the imports starting with `@` to the `src` folder.\r\n\r\nThe Webpack config looks like:\r\n\r\n```js\r\n// webpack.config.js\r\nconst path = require('path');\r\n\r\nmodule.exports = {\r\n    resolve: {\r\n        alias: {\r\n            // Assume that the `src` folder is located at the root folder\r\n            '@': path.join(__dirname, 'src'),\r\n        },\r\n    },\r\n};\r\n```\r\n\r\nThe helper function mentioned at the top can be shorten as below:\r\n\r\n```js\r\nimport { formatDate } from '@/helpers/formatDate';\r\n```\r\n\r\nWebpack will be looking for the helper in the `src/helpers/formatDate` file.\r\n\r\n### See also\r\n\r\n-   [Shorten import paths in TypeScript](/shorten-import-paths-in-typescript.html)\r\n","frontMatter":{"title":"Shorten import paths in Webpack","category":"Tip","date":"2021-03-17 11:04:00 +7","topics":"Webpack"},"prevPost":{"slug":"shorten-import-paths-in-typescript","title":"Shorten import paths in TypeScript"},"nextPost":{"slug":"show-a-placeholder-for-an-empty-list","title":"Show a placeholder for an empty list"}},"__N_SSG":true}