{"pageProps":{"content":"\r\nThe comma operator (`,`) used in the following form evaluates the left-hand side (`a`) and returns the value of the right-hand side (`b`):\r\n\r\n```js\r\nconst c = (a, b);\r\n```\r\n\r\nWe can use it to shorten codes in some cases.\r\n\r\n### Shorten an if statement\r\n\r\n```js\r\nlet result;\r\nif (condition) {\r\n    doSomething();\r\n    result = value;\r\n} else {\r\n    result = other;\r\n}\r\n\r\n// Shorten version\r\nconst result = condition ? (doSomething(), value) : other;\r\n```\r\n\r\n### Shorten an arrow function\r\n\r\n```js\r\nconst arrowFn = (arg) => {\r\n    doSomething();\r\n    return result;\r\n};\r\n\r\n// Shorten version\r\nconst arrowFn = (arg) => (doSomething(), result);\r\n```\r\n\r\nHere is a few examples of using the comma operator to [shorten](https://1loc.dev) arrow functions:\r\n\r\n-   [Count the occurrences of array elements](https://1loc.dev/#count-the-occurrences-of-array-elements)\r\n\r\n```js\r\nconst countOccurrences = (arr) => arr.reduce((p, c) => ((p[c] = ++p[c] || 1), p), {});\r\n\r\ncountOccurrences([2, 1, 3, 3, 2, 3]);\r\n// { '1': 1, '2': 2, '3': 3 }\r\n```\r\n\r\n-   [Split an array into chunks](https://1loc.dev/#split-an-array-into-chunks)\r\n\r\n```js\r\nconst chunk = (arr, s) => arr.reduce((a, e, i) => (i % s ? a[a.length - 1].push(e) : a.push([e]), a), []);\r\n\r\nchunk([1, 2, 3, 4, 5, 6, 7, 8], 3);\r\n// [[1, 2, 3], [4, 5, 6], [7, 8]]\r\n```\r\n\r\n### See also\r\n\r\n-   [Log a variable in an arrow function](/log-a-variable-in-an-arrow-function.html)\r\n","frontMatter":{"title":"Shorten codes with the comma operator","category":"Trick","date":"2021-03-06 15:19:00 +7","topics":"JavaScript"},"prevPost":{"slug":"share-recommendation-visual-studio-code-extensions","title":"Share recommendation Visual Studio Code extensions"},"nextPost":{"slug":"shorten-import-paths-in-typescript","title":"Shorten import paths in TypeScript"}},"__N_SSG":true}