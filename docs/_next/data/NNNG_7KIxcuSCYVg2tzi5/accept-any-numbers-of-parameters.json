{"pageProps":{"content":"\r\nIn the old days, we can use the `arguments` variable to get the dynamic parameters that are passed to a function.\r\n\r\n```js\r\nconst sum = function () {\r\n    return Array.from(arguments).reduce((a, b) => a + b, 0);\r\n};\r\n\r\nsum(1); // 1\r\nsum(1, 2); // 3\r\nsum(1, 2, 3); // 6\r\nsum(1, 2, 3, 4); // 10\r\n```\r\n\r\nHowever, most of us aren't aware about the existence of `arguments`. It has some drawbacks such as\r\n\r\n-   It's not an array, so we usually have to convert it to array first in order to use `Array` methods\r\n-   More importantly, it isn't available in arrow functions\r\n\r\nThe ES6 rest parameter (`...`) provides an easier way to work with an unknown numbers of parameters. The `sum` function above can be [written](https://1loc.dev/#calculate-the-sum-of-arguments) as following:\r\n\r\n```js\r\nconst sum = (...params) => params.reduce((a, b) => a + b, 0);\r\n\r\nsum(1, 2, 3, 4, 5); // 15\r\n```\r\n\r\n### See also\r\n\r\n-   [Create a function that accepts a single parameter](/create-a-function-that-accepts-a-single-parameter.html)\r\n-   [Pass an array as function arguments](/pass-an-array-as-function-arguments.html)\r\n","frontMatter":{"title":"Accept any numbers of parameters","category":"Tip","date":"2021-03-01 12:01:00 +7","topics":"JavaScript"},"prevPost":null,"nextPost":{"slug":"access-local-webpack-dev-servers-from-external-devices","title":"Access local webpack dev servers from external devices"}},"__N_SSG":true}