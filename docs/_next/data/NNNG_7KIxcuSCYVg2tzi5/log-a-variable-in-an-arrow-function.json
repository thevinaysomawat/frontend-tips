{"pageProps":{"content":"\r\nHave you ever had to debug an 1 line arrow function using `console.log`? It usually requires us to switch to a multiple lines version such as:\r\n\r\n```js\r\nconst formatYmd = (date) => {\r\n    console.log(date.toISOString());\r\n    return date.toISOString().slice(0, 10);\r\n};\r\n```\r\n\r\nYou can get rid of that conversion by using the `||` operator. It works because `console.log()` returns `undefined`, so the `||` will enforce the function to evaluate and return the right side which is our actual function.\r\n\r\n```js\r\nconst formatYmd = (date) => console.log(date.toISOString()) || date.toISOString().slice(0, 10);\r\n\r\nformatYmd(new Date());\r\n// Print something like `2021-02-25T04:52:39.720Z` in the Console\r\n```\r\n\r\nThere is another, less known tip which uses the [comma operator](/shorten-codes-with-the-comma-operator.html):\r\n\r\n```js\r\nconst formatYmd = date => (console.log(...), date.toISOString().slice(0, 10));\r\n```\r\n\r\n> You will find more useful 1 line-of-code functions on [1 LOC](https://1loc.dev)\r\n\r\n### See also\r\n\r\n-   [Conditional logging in the Console](/conditional-logging-in-the-console.html)\r\n-   [Log a value to the Console](/log-a-value-to-the-console.html)\r\n-   [Log a variable to the console using conditional breakpoints](/log-a-variable-to-the-console-using-conditional-breakpoints.html)\r\n-   [Log an array to the Console](/log-an-array-to-the-console.html)\r\n","frontMatter":{"title":"Log a variable in an arrow function","category":"Trick","date":"2021-02-25 11:57:00 +7","topics":"JavaScript"},"prevPost":{"slug":"log-a-value-to-the-console","title":"Log a value to the Console"},"nextPost":{"slug":"log-a-variable-to-the-console-using-conditional-breakpoints","title":"Log a variable to the console using conditional breakpoints"}},"__N_SSG":true}