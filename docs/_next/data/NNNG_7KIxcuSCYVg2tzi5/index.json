{"pageProps":{"posts":[{"category":"Tip","content":"\r\nIn the old days, we can use the `arguments` variable to get the dynamic parameters that are passed to a function.\r\n\r\n```js\r\nconst sum = function () {\r\n    return Array.from(arguments).reduce((a, b) => a + b, 0);\r\n};\r\n\r\nsum(1); // 1\r\nsum(1, 2); // 3\r\nsum(1, 2, 3); // 6\r\nsum(1, 2, 3, 4); // 10\r\n```\r\n\r\nHowever, most of us aren't aware about the existence of `arguments`. It has some drawbacks such as\r\n\r\n-   It's not an array, so we usually have to convert it to array first in order to use `Array` methods\r\n-   More importantly, it isn't available in arrow functions\r\n\r\nThe ES6 rest parameter (`...`) provides an easier way to work with an unknown numbers of parameters. The `sum` function above can be [written](https://1loc.dev/#calculate-the-sum-of-arguments) as following:\r\n\r\n```js\r\nconst sum = (...params) => params.reduce((a, b) => a + b, 0);\r\n\r\nsum(1, 2, 3, 4, 5); // 15\r\n```\r\n\r\n### See also\r\n\r\n-   [Create a function that accepts a single parameter](/create-a-function-that-accepts-a-single-parameter.html)\r\n-   [Pass an array as function arguments](/pass-an-array-as-function-arguments.html)\r\n","slug":"accept-any-numbers-of-parameters","title":"Accept any numbers of parameters","topics":"JavaScript"},{"category":"Tip","content":"\r\nSometimes we would like to access a local development server externally. It happens when we want to see how our web application works on mobile phones. Or co-workers want to see how it looks on their browsers.\r\n\r\nThe local server is available at `http://localhost:PORT` where `PORT` represents the port number that the server listens on. In order to make it accessible in the same network, we have to replace `localhost` with the IP address.\r\n\r\nWebpack dev server allows the server to be available externally via the `host` option:\r\n\r\n```js\r\n// webpack.config.js\r\nmodule.exports = {\r\n  ...\r\n  devServer: {\r\n    host: '0.0.0.0',\r\n    port: 8001,\r\n    ...\r\n  },\r\n};\r\n```\r\n\r\nThe `host` option can be passed to the command line interface as well:\r\n\r\n```shell\r\nwebpack serve --host 0.0.0.0\r\n```\r\n\r\nWith the configurations above, we can access the server internally (`http://localhost:8001`) and externally (`http://THE-IP-ADDRESS:8001`).\r\n","slug":"access-local-webpack-dev-servers-from-external-devices","title":"Access local webpack dev servers from external devices","topics":"Webpack"},{"category":"Tip","content":"\r\nWhen you select a node under the _Elements_ tab, Chrome DevTools adds `== $0` right after the node.\r\n\r\nIn give us a hint that we can use the `$0` expression to access the selected node.\r\nYou can invoke any [DOM APIs](https://htmldom.dev) from `$0`.\r\n\r\n![Access selected node](/img/selected-node.png)\r\n\r\n> The DevTools remembers the last five selected nodes. In addition to `$0`, we can use `$1`, `$2`, `$3` and `$4` to access the last selected nodes.\r\n\r\nYou also can right-click the node, and choose _Store as global variable_ from the context menu. DevTools creates a variable, `temp1` for example, to represent the selected node.\r\nNow you can use `temp1` to manage the node in the same way as `$0`.\r\n\r\n![Store selected node](/img/store-selected-node.png)\r\n","slug":"access-the-selected-node-in-the-console","title":"Access the selected node in the Console","topics":"DevTools"},{"category":"Tip","content":"\r\nIt's a common scenario where we want to split a heading into multiple lines. For example, the heading is displayed continuously on a big screen. But on a small screen, it should breaks into different parts.\r\n\r\nWithout using the `br` tag, we can construct the heading from various inline `span` elements.\r\n\r\n```html\r\n<h2>\r\n    <span class=\"primary\">Tip, tricks, best practices</span>\r\n    <span>of front-end development</span>\r\n</h2>\r\n```\r\n\r\nBy using the `::after` pseudo element, we are able to add a line break after the first inline element:\r\n\r\n```css\r\n.primary::after {\r\n    content: '\\A';\r\n    white-space: pre;\r\n}\r\n```\r\n\r\nWhere `\\A` represents the line break character.\r\n\r\n### Demo\r\n\r\n:demo[]{title=\"Add a line break between inline elements\" url=\"/demo/add-a-line-break-between-inline-elements/index.html\"}\r\n","slug":"add-a-line-break-between-inline-elements","title":"Add a line break between inline elements","topics":"CSS"},{"category":"Tip","content":"\r\nWe already know that when users click a mailto link (`<a href=\"mailto: ___\"`), the browser will open the default email application and fill the receiver's email address automatically.\r\n\r\nIs it possible to fill the initial subject? The answer is yes. We can define it by passing the `subject` parameter:\r\n\r\n```html\r\n<a href=\"mailto:john@example.com&subject=...\"></a>\r\n```\r\n\r\nIn addition to the `subject` parameter, there are also `cc`, `bcc` and `body` parameters. They'll be filled in the default email application if specified.\r\n\r\n```html\r\n<a href=\"mailto:john@example.com&cc=...&bcc=...&body=...\"></a>\r\n```\r\n\r\nIt's worth noting that the `subject` and `body` parameters must replace the spaces with `%20`. There are some [online tool](https://mailtolinkgenerator.com) to [generate](https://mailtolink.me) the final mailto link for us.\r\n\r\n> If you want to use multiple email addresses in the `cc` and `bcc` parameters, then separate them with commas (`,`)\r\n","slug":"add-a-subject-to-a-mailto-link","title":"Add a subject to a mailto link","topics":"HTML"},{"category":"Tip","content":"\r\nIf you want to add an icon to `a` element that links to an external website, then you can depend on the `href` or `[target=\"_blank\"]` attribute.\r\n\r\n### The target attribute\r\n\r\n```css\r\na[target='_blank'] {\r\n    align-items: center;\r\n    display: flex;\r\n}\r\na[target='_blank']:after {\r\n    /* The icon can be a SVG or image file */\r\n    content: url(/link/to/icon.svg);\r\n    margin-left: 0.25rem;\r\n}\r\n```\r\n\r\nThe `content` property can be a string that appends to the link:\r\n\r\n```css\r\na[target='_blank']:after {\r\n    content: ' (external)';\r\n}\r\n```\r\n\r\nUsing an icon font such as [Font Awesome](https://fontawesome.com) is another option:\r\n\r\n```css\r\na[target='_blank']:after {\r\n    content: ' \\f08e';\r\n    font-family: 'FontAwesome';\r\n}\r\n```\r\n\r\n### The href attribute\r\n\r\nThis approach relies on the `href` attribute. A link is treated as external if\r\n\r\n-   It doesn't match with the domain of website\r\n-   It isn't an anchor (doesn't start with `#`)\r\n-   It doesn't start with `/`\r\n\r\nIt's up to you to define more conditions here. But with the set of conditions above, the `:after` looks like\r\n\r\n```css\r\na:not([href*='domain.com']):not([href^='#']):not([href^='/']):after {\r\n    /* Set the `content` property as mentioned in the first approach */\r\n}\r\n```\r\n\r\n### Demo\r\n\r\n:demo[]{title=\"Add an icon to external links\" url=\"/demo/add-an-icon-to-external-links/index.html\"}\r\n\r\n### See also\r\n\r\n-   [Ignore case sensitivity in a CSS attribute selector](/ignore-case-sensitivity-in-a-css-attribute-selector.html)\r\n","slug":"add-an-icon-to-external-links","title":"Add an icon to external links","topics":"CSS"},{"category":"Trick","content":"\r\nBy using the `accesskey` attribute, we can specify a shortcut key for the user to activate or focus on an element. The value of the attribute has to be a single character.\r\n\r\nIt's worth noting that each browser provides a different combination of keys to access the shortcut.\r\n\r\n| Browser | macOS                | Windows               | Linux                 |\r\n| ------- | -------------------- | --------------------- | --------------------- |\r\n| Chrome  | `alt` + `ctrl` + key | `alt` + key           | `alt` + key           |\r\n| Firefox | `alt` + `ctrl` + key | `alt` + `shift` + key | `alt` + `shift` + key |\r\n| Safari  | `alt` + `ctrl` + key | n/a                   | n/a                   |\r\n\r\nIn the following sample code, pressing the combination `alt` + `ctrl` + `e` on Chrome macOS will trigger the button's `click` event.\r\n\r\n```html\r\n<button accesskey=\"e\" onclick=\"alert('Edit')\">Edit</button>\r\n```\r\n","slug":"add-keyboard-shortcuts","title":"Add keyboard shortcuts","topics":"HTML"},{"category":"Best practice","content":"\r\nThe `parseInt` method takes two parameters:\r\n\r\n```js\r\nparseInt(value, radix);\r\n```\r\n\r\nThe second parameter specifies the current numeral system. In the case it's not specified, then it will be set automatically based on the value.\r\nIf the value starts with `0x` or `0X`, then the radix is 16 (hexadecimal). In other cases, the radix is 10 (decimal).\r\n\r\nIn the older versions of JavaScript, if the string starts with `0` then the radix is set as 8 (octal).\r\n\r\n```js\r\nparseInt('0xF'); // 15\r\nparseInt('0XF'); // 15\r\nparseInt('0xF', 16); // 15\r\n\r\nparseInt('0xF', 10); // 0\r\n```\r\n\r\nSince the method could be implemented differently in different versions of JavaScript and browsers, it's recommended to pass the radix number.\r\n","slug":"always-pass-the-radix-to-parseint","title":"Always pass the radix to parseInt","topics":"JavaScript"},{"category":"Tip","content":"\r\nAssume that our page is organized by three parts: the header, main content and footer. It's a common layout that the footer is always displayed at the bottom no matter how long the main content is.\r\n\r\n```html\r\n<body>\r\n    <div class=\"container\">\r\n        <header>...</header>\r\n        <main>...</main>\r\n        <footer>...</footer>\r\n    </div>\r\n</body>\r\n```\r\n\r\nUsing CSS flexbox, the layout can be implemented as following:\r\n\r\n```css\r\n.container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    min-height: 100vh;\r\n}\r\n\r\nheader,\r\nfooter {\r\n    flex-shrink: 0;\r\n}\r\n\r\nmain {\r\n    flex-grow: 1;\r\n}\r\n```\r\n\r\nSetting `flex-grow: 1` to the main content will make it take the available spaces. The footer then [sticks at the bottom](https://csslayout.io/patterns/sticky-footer).\r\n\r\n### Demo\r\n\r\n:demo[]{title=\"Always put the footer at the bottom\" url=\"/demo/always-put-the-footer-at-the-bottom/index.html\"}\r\n","slug":"always-put-the-footer-at-the-bottom","title":"Always put the footer at the bottom","topics":"CSS"},{"category":"Best practice","content":"\r\nIn order to open a link in a new tab, we use the `target=\"_blank\"` attribute. However, it can lead to some issues if you aren't aware of them.\r\n\r\nFirst, the newly opened tab uses the same process with the opener one. Hence, it can slow down your page.\r\nMore importantly, the new tab is able to access the `window` object of the opener page via the `window.opener` object. Imagine that the new tab executes the following code:\r\n\r\n```js\r\nwindow.opener.location = 'http://fake.website.here';\r\n```\r\n\r\nAs the code implies, it redirects the original tab to a fake website. What happens if the fake website has the same UI as the real one? Since users already opened it, they may not realize that the website they are looking at isn't real.\r\n\r\nAdding `rel=\"noopener\"` fixes the issues.\r\n\r\nIt's good to know that there is the `rel=\"noreferrer\"` attribute. It not only fixes the issues that `noopener` does, but also prevents the `Referer` header from being sent to the new tab.\r\n\r\n```html\r\n<!-- Don't -->\r\n<a target=\"_blank\">...</a>\r\n\r\n<!-- Do -->\r\n<a target=\"_blank\" rel=\"noopener\">...</a>\r\n\r\n<!-- Or -->\r\n<a target=\"_blank\" rel=\"noreferrer\">...</a>\r\n<a target=\"_blank\" rel=\"noopener noreferrer\">...</a>\r\n```\r\n\r\n> Some modern browsers, such as Chrome 88+, automatically adds the `noopener` behavior if it's missing.\r\n> However, it's still recommended to add `rel=\"noopener\"` or `rel=\"noreferrer\"` to avoid the security and performance issues in old legacy browsers.\r\n","slug":"always-use-noopener-or-noreferrer-for-links-opened-in-new-tabs","title":"Always use \"noopener\" or \"noreferrer\" for links opened in new tabs","topics":"HTML"},{"category":"Tip","content":"\r\nSetting the `list-style-type` property to the below value will append zero number to items of an ordered list (`ol`):\r\n\r\n```css\r\nol {\r\n    list-style-type: decimal-leading-zero;\r\n}\r\n```\r\n\r\nHowever, it only has effect with the items whose indices are less than 10. It means that if our list has more than 100 items, then they will be prefixed as following:\r\n\r\n```html\r\n01. Item 02. Item ... 09. Item 10. Item ... 99. Item 100. Item ...\r\n```\r\n\r\nIn order to fix that issue, we can use the CSS counter. Each item holds the current value of the counter which is incremented by one in the next item:\r\n\r\n```css\r\nol {\r\n    counter-reset: items;\r\n    list-style-type: none;\r\n}\r\nli {\r\n    counter-increment: items;\r\n}\r\n```\r\n\r\nTo prefix an item with its associate counter value, the `::before` pseudo element comes to the rescue.\r\n\r\n```css\r\nli:before {\r\n    content: '00' counter(items) '. ';\r\n}\r\nli:nth-child(n + 10)::before {\r\n    content: '0' counter(items) '. ';\r\n}\r\nli:nth-child(n + 100)::before {\r\n    content: counter(items) '. ';\r\n}\r\n```\r\n\r\nThe `:nth-child(n+10)` selector indicates the items whose indices are greater or equal to 10. It will override the styles applied for `li::before` elements.\r\nIn the same way, `:nth-child(n+100)` overrides the styles of `:nth-child(n+10)`.\r\n\r\n### See also\r\n\r\n-   [Style index numbers of list items](/style-index-numbers-of-list-items.html)\r\n-   [Use negative nth-child and nth-last-child](/use-negative-nth-child-and-nth-last-child.html)\r\n","slug":"append-leading-zeros-to-ordered-list-items","title":"Append leading zeros to ordered list items","topics":"CSS"},{"category":"Best practice","content":"\r\nLet's consider a situation where we have a function that writes a string to a file. It allows user to append the content to file, or override the content via the `override` parameter:\r\n\r\n```js\r\nconst writeToFile = (content: string, file: string, override: boolean) => {\r\n...\r\n};\r\n```\r\n\r\nWith that signature, the function will be invoked as following\r\n\r\n```js\r\n// Append the content to file\r\nwriteToFile(content, file, true);\r\n\r\n// Override the file\r\nwriteToFile(content, file, false);\r\n```\r\n\r\nIf you are not the one who creates the function, you have to question what the boolean value represents until looking at the implementation.\r\n\r\nIt is worse if the function has a lot of boolean flags. Using boolean flags makes the core harder to read and maintain.\r\n\r\nThere are a few ways to get rid of the issue.\r\n\r\n### Provide explicit methods\r\n\r\n```js\r\nappendToFile(content, file);\r\noverrideFile(content, file);\r\n```\r\n\r\n### Use an object parameter\r\n\r\n```js\r\nwriteToFile(content, file, { override });\r\n```\r\n\r\n### Use an enum\r\n\r\nIf you're using TypeScript, then you can use `enum` to represent the possible values of a boolean flag.\r\n\r\n```js\r\nenum SaveMode {\r\n  Append,\r\n  Override,\r\n}\r\n\r\nwriteToFile(content, file, mode: SaveMode);\r\n```\r\n\r\nIt's confident for consumers to call the method:\r\n\r\n```js\r\nwriteToFile(content, file, SaveMode.Append);\r\n\r\n// Or\r\nwriteToFile(content, file, SaveMode.Override);\r\n```\r\n\r\n### See also\r\n\r\n-   [Manage multiple boolean flags](/manage-multiple-boolean-flags.html)\r\n","slug":"avoid-boolean-parameters","title":"Avoid boolean parameters","topics":"JavaScript"},{"category":"Best practice","content":"\r\nIt takes time to load a big font. Most browsers will hide texts until the font is loaded completely. This problem is known as _flash of invisible text_ (FOIT).\r\n\r\nWe can prevent it from happening by asking the browser to use the system font while the custom font is still being loaded. Once the font is loaded, it will replace the system font used earlier.\r\nThis phrase is also known as _flash of unstyled text_ (FOUT).\r\n\r\nIn order to archive it, we can use the `font-display` style:\r\n\r\n```css\r\n@font-face {\r\n    font-family: 'Roboto';\r\n    font-display: swap;\r\n}\r\n```\r\n\r\nIf you are using [Google fonts](https://fonts.google.com), then putting the `display=swap` parameter is the equivalent way:\r\n\r\n```html\r\n<link href=\"https://fonts.googleapis.com/css2?family=Roboto:400,700&display=swap\" rel=\"stylesheet\" />\r\n```\r\n\r\n### See also\r\n\r\n-   [Combine Google font requests](/combine-google-font-requests.html)\r\n-   [Load given characters in a Google font request](/load-given-characters-in-a-google-font-request.html)\r\n","slug":"avoid-invisible-text-when-loading-a-font","title":"Avoid invisible text when loading a font","topics":"CSS, Google Font"},{"category":"Best practice","content":"\r\nIt's common to use the heading elements, `<h1>` to `<h6>`, to represent the heading of sections.\r\nThe `<h1>` tag is often used in the highest section, whereas the `<h2>`, `<h3>`, ... tags are used in the lower section.\r\n\r\nHeading elements are used not only because of their semantic meanings but also by screen reading tools. Those tools determine the content of the page based on the headings, and allow users to navigate between sections via the headings.\r\n\r\nIt's recommended to keep the heading elements in the order, so the users won't be confused that there's a missing heading or section while navigating on the page.\r\n\r\n```html\r\n<!-- Do not -->\r\n<h1>Main heading</h1>\r\n<h3>Heading level 2</h3>\r\n<h2>Heading level 3</h2>\r\n\r\n<!-- Do -->\r\n<h1>Main heading</h1>\r\n<h2>Heading level 2</h2>\r\n<h3>Heading level 3</h3>\r\n```\r\n\r\n### See also\r\n\r\n-   [Avoid using multiple `<h1>` tags per page](/avoid-using-multiple-h1-tags-per-page.html)\r\n","slug":"avoid-skipping-heading-levels","title":"Avoid skipping heading levels","topics":"Accessibility, HTML"},{"category":"Best practice","content":"\r\nAccording to the [HTML specifications](https://html.spec.whatwg.org/multipage/dom.html#the-id-attribute), a valid `id` can consist of almost characters except [ASCII whitespace](https://infra.spec.whatwg.org/#ascii-whitespace).\r\nAssume that we have an element representing an user's email address:\r\n\r\n```html\r\n<div id=\"user.email\" />\r\n```\r\n\r\nIn order to access the element, the `getElementById()` method accepts all of three ways passing the `id`:\r\n\r\n```js\r\n// They return the same element\r\ndocument.getElementById('user.email');\r\ndocument.getElementById('user\\\\.email');\r\ndocument.getElementById('user\\\\\\\\.email');\r\n```\r\n\r\nBut these methods return different results if you are using [jQuery](https://jquery.com) library:\r\n\r\n```js\r\n// Function\t\t\t\t// Returned element\r\n$('#user.email'); // <div id=\"user\" class=\"email\" />\r\n$('#user\\\\.email'); // <div id=\"user\" class=\"email\" />\r\n$('#user\\\\\\\\.email'); // <div id=\"user.email\" />\r\n```\r\n\r\nAs you see, the first two methods will find an element with `id` of `user` and has `email` class.\r\nIn order to get the correct element, we have to escape the `id` using double backslashes (`\\\\`). It also happens if we use the same value in CSS:\r\n\r\n```css\r\n#user.email {\r\n    ...;\r\n}\r\n```\r\n\r\nAll the styles declared within `#user.email { ... }` has effect on the element with `id` of `user` and has the `email` class.\r\n\r\nThe styles aren't applied to element with `id` of `user.email`. To define the styles for our element, we have to escape the selector.\r\nBut this time, it requires a _single_ backslash only:\r\n\r\n```css\r\n#user\\\\.email {\r\n    ...;\r\n}\r\n```\r\n\r\nAvoid using the special characters in the `id` and `class` attributes will help us get rid of the confusion and errors above.\r\nIf it's not possible to get rid of colons and periods (for example, the `id` attribute is generated by the server side), then you can use the single backslash as above, or use the attribute selector.\r\nNote that it has a lower specificity than the `id` selector:\r\n\r\n```css\r\n[id='user.email'] {\r\n    ...;\r\n}\r\n```\r\n\r\n### See also\r\n\r\n-   [Do not use submit to name a submit button](/do-not-use-submit-to-name-a-submit-button.html)\r\n","slug":"avoid-to-use-colons-and-periods-in-the-id-attribute","title":"Avoid to use colons and periods in the id attribute","topics":"DOM, HTML"},{"category":"Best practice","content":"\r\nThe `@import` function allows us to include styles from an external file. It's very useful when our project has a lot of styles. Instead of creating a single file to define all styles, we can split them into multiple files and compose them in a master file.\r\n\r\n```css\r\n/* The main file */\r\n@import 'common.css';\r\n@import 'components.css';\r\n@import 'pages.css';\r\n...\r\n```\r\n\r\nUsing `@import` makes our styles more organized and easier to maintain. However, the browser has to download and parse each CSS file one by one before continuing rendering the page. The CSS files are downloaded sequentially instead of parallelly.\r\n\r\nIt also can slow down the website depending on how many the number of CSS files are.\r\n\r\nThere are a few ways to get rid of the issues while the styles are still organized.\r\n\r\n# Using CSS preprocessors\r\n\r\nWe can use CSS preprocessors such as [Less](http://lesscss.org), [SASS](https://sass-lang.com). They not only provide the ability of using `@import` as normal CSS, but also merge styles in a single, final CSS file.\r\n\r\n# Using multiple link tags\r\n\r\nEach CSS can be downloaded by a separate `link` tag as following:\r\n\r\n```html\r\n<head>\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"common.css\" />\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"components.css\" />\r\n    ...\r\n</head>\r\n```\r\n\r\n> **Good to know**\r\n>\r\n> In the old versions of Internet Explorer, the `@import` function behaves the same as the target CSS is inserted at the bottom of the page\r\n","slug":"avoid-using-css-import","title":"Avoid using CSS @import","topics":"CSS"},{"category":"Best practice","content":"\r\nThe `<h1>` tag is often used at the top of the page to indicate the overall purpose of the page's content.\r\nIt plays an important role in SEO because the search engines weigh it higher than other factors. It can be used to display in the search results as well.\r\n\r\nIt's also good to know that in the old versions of HTML, HTML 4 specifically, allow one `<h1>` tag per page. HTML 5 allows multiple `<h1>` tags which each one can be used on each section.\r\n\r\nIt means that using multiple `<h1>` tags is valid in terms of HTML syntax, but it is not considered a best practice.\r\n\r\n```html\r\n<!-- 👎 Do NOT -->\r\n<h1>Main heading</h1>\r\n\r\n<section>\r\n    <h1>A section heading</h1>\r\n</section>\r\n\r\n<section>\r\n    <h1>Another section heading</h1>\r\n</section>\r\n\r\n<!-- 👍 Do -->\r\n<h1>Main heading</h1>\r\n\r\n<section>\r\n    <h2>A section heading</h2>\r\n</section>\r\n\r\n<section>\r\n    <h2>Another section heading</h2>\r\n</section>\r\n```\r\n\r\n### See also\r\n\r\n-   [Avoid skipping heading levels](/avoid-skipping-heading-levels.html)\r\n","slug":"avoid-using-multiple-h1-tags-per-page","title":"Avoid using multiple <h1> tags per page","topics":"HTML"},{"category":"Best practice","content":"\r\nThese tags are often used for styling purposes. It's recommended not to use them. Instead, use the semantic tags or CSS styles that provide the same appearances.\r\n\r\n| Tag   | Recommended way                 |\r\n| ----- | ------------------------------- |\r\n| `<b>` | `<strong>`                      |\r\n| `<i>` | `<em>`                          |\r\n| `<s>` | `text-decoration: line-through` |\r\n| `<u>` | `text-decoration: underline`    |\r\n\r\nFor more information about the differences between these tags , please take a look at [`<b>`, `<i>` vs `<strong>`, `<em>`](https://thisthat.dev/b-i-vs-strong-em/).\r\n","slug":"avoid-using-the-b-i-s-and-u-tags","title":"Avoid using the <b>, <i>, <s> and <u> tags","topics":"Accessibility, HTML"},{"category":"Tip","content":"\r\nWhen taking a screenshot with the combination of <kbd>cmd</kbd> + <kbd>shift</kbd> + <kbd>4</kbd>, macOS adds a shadow to the screenshot automatically.\r\n\r\nIf you don't want to have the shadow, then after pressing the combination keys above, pressing and holding the <kbd>alt</kbd> + <kbd>space</kbd> keys.\r\nThen clicking the target window will produce a screenshot without the shadow.\r\n\r\nThe shadowless screenshot below is an example when capturing the [1 LOC](https://1loc.dev) website:\r\n\r\n![Remove the shadow](/img/remove-shadow.png)\r\n\r\n### See also\r\n\r\n-   [Copy screenshots to the clipboard on macOS](/copy-screenshots-to-the-clipboard-on-macos.html)\r\n-   [Move the screenshot area on macOS](/move-the-screenshot-area-on-macos.html)\r\n","slug":"capture-a-screenshot-without-shadow-on-macos","title":"Capture a screenshot without shadow on macOS","topics":"macOS"},{"category":"Tip","content":"\r\nThere're different ways to [center](https://csslayout.io/patterns/centering) a given element in both directions.\r\n\r\n### Using flexbox\r\n\r\n```css\r\n.container {\r\n    align-items: center;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n}\r\n```\r\n\r\n### Using grid\r\n\r\n```css\r\n.container {\r\n    display: grid;\r\n    place-content: center;\r\n}\r\n```\r\n\r\n### Using positions\r\n\r\nWe position the child element absolutely to the parent element.\r\n\r\n```css\r\n.parent {\r\n    position: relative;\r\n}\r\n.child {\r\n    left: 50%;\r\n    position: absolute;\r\n    top: 50%;\r\n    transform: translate(-50%, -50%);\r\n}\r\n```\r\n","slug":"center-an-element-vertically-and-horizontally","title":"Center an element vertically and horizontally","topics":"CSS"},{"category":"Trick","content":"\r\nWe can detect if the current browser supports for given attribute, `pattern` for example, as following:\r\n\r\n```js\r\nconst isPatternSupported = 'pattern' in document.createElement('input');\r\n```\r\n\r\nIf you would like to check for the value of attribute, it takes more steps. The sample code below determines whether the [native date input](https://htmldom.dev/check-if-the-native-date-input-is-supported) is supported:\r\n\r\n```js\r\nconst isDateInputSupported = () => {\r\n    // Create new input element\r\n    const ele = document.createElement('input');\r\n\r\n    // Set the type attribute\r\n    ele.setAttribute('type', 'date');\r\n\r\n    const invalidValue = 'not-a-valid-date';\r\n\r\n    // Set an invalid value\r\n    ele.setAttribute('value', invalidValue);\r\n\r\n    return ele.value !== invalidValue;\r\n};\r\n```\r\n\r\nIf the browser supports the date input, invoking `setAttribute` with an invalid date won't have effect on the `value` attribute. As a result, `ele.value` will be an empty string.\r\n\r\nOtherwise, the input is treated as normal text input and `ele.value` returns the original value.\r\n","slug":"check-if-the-browser-supports-for-an-element-attribute","title":"Check if the browser supports for an element attribute","topics":"DOM, JavaScript"},{"category":"Tip","content":"\r\nIt's common that we have multiple branches in the same Git repository. Each branch is used to fix a given bug, or implements a new feature.\r\n\r\nSwitching between branches is one of popular tasks in our daily work:\r\n\r\n```shell\r\n$ git checkout <target-branch-name>\r\n```\r\n\r\nWithout specifying the branch name, we can quickly checkout the previous branch with the following command:\r\n\r\n```shell\r\n$ git checkout -\r\n```\r\n\r\n### See also\r\n\r\n-   [Go to the previous directory](/go-to-the-previous-directory)\r\n","slug":"checkout-the-previous-branch","title":"Checkout the previous branch","topics":"Git"},{"category":"Best practice","content":"\r\nUsually we add separated links when loading different [Google font](https://fonts.google.com) as following:\r\n\r\n```html\r\n<link href=\"https://fonts.googleapis.com/css?family=Open+Sans:400,600\" rel=\"stylesheet\" />\r\n<link href=\"https://fonts.googleapis.com/css?family=Roboto:400,700\" rel=\"stylesheet\" />\r\n```\r\n\r\nThe number of HTTP requests sent to Google can be increased depending on how many fonts we want to load. It can affect the page's loading time.\r\n\r\nIt's recommended to combine the requests into a single one using the `|` character. The link might look like:\r\n\r\n```html\r\n<link href=\"https://fonts.googleapis.com/css?family=Open+Sans:400,600|Roboto:400,700\" rel=\"stylesheet\" />\r\n```\r\n\r\nNote that the syntax is a little bit different when using the Google Font v2. It allows to pass multiple `family` parameters:\r\n\r\n```html\r\n<link\r\n    href=\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@400,600&family=Roboto:wght@400,700\"\r\n    rel=\"stylesheet\"\r\n/>\r\n```\r\n\r\n### See also\r\n\r\n-   [Avoid invisible text when loading a font](/avoid-invisible-text-when-loading-a-font.html)\r\n-   [Load given characters in a Google font request](/load-given-characters-in-a-google-font-request.html)\r\n","slug":"combine-google-font-requests","title":"Combine Google font requests","topics":"CSS, Google Font"},{"category":"Tip","content":"\r\nThe `:is` pseudo-class selector applies the styles for any element that matches a selector listed in the arguments.\r\n\r\nRather than writing separate selectors:\r\n\r\n```css\r\nheader a:hover,\r\nnav a:hover,\r\nfooter a:hover {\r\n    text-decoration: underline;\r\n}\r\n```\r\n\r\nWe can combine them into a single one as following:\r\n\r\n```css\r\n:is(header, nav, footer) a:hover {\r\n    text-decoration: underline;\r\n}\r\n```\r\n","slug":"combine-styles-with-the-is-pseudo-class-selector","title":"Combine styles with the :is pseudo-class selector","topics":"CSS"},{"category":"Tip","content":"\r\nNowadays, it is common to use React's context at the root of an application to manage a shared state between any components.\r\n\r\nFor example, checking whether or not the current user has logged in might be accomplished by the `AuthProvider` provider:\r\n\r\n```js\r\nconst App = () => {\r\n    return (\r\n        <AuthProvider>\r\n            {...}\r\n        </AuthProvider>\r\n    );\r\n};\r\n```\r\n\r\nUsing multiple providers could make the code harder to read because there are a lot of nested components:\r\n\r\n```js\r\nconst App = () => {\r\n    return (\r\n        <Router>\r\n            <AuthProvider>\r\n                <ThemeProvider>\r\n                    <LocalizationProvider>\r\n                        {...}\r\n                    </LocalizationProvider>\r\n                </ThemeProvider>\r\n            </AuthProvider>\r\n        </Router>\r\n    );\r\n};\r\n```\r\n\r\nThe providers can be composed together by using the `reduce` function:\r\n\r\n```js\r\nconst compose = (providers) =>\r\n    providers.reduce((Prev, Curr) => ({ children }) => (\r\n        <Prev>\r\n            <Curr>{children}</Curr>\r\n        </Prev>\r\n    ));\r\n```\r\n\r\nThe provider declarations in the root can be shorten as below:\r\n\r\n```js\r\nconst Provider = compose([\r\n    Router,\r\n    AuthProvider,\r\n    ThemeProvider,\r\n    LocalizationProvider,\r\n]);\r\n\r\nconst App = () => {\r\n    return (\r\n        <Provider>\r\n            {...}\r\n        </Provider>\r\n    );\r\n};\r\n```\r\n","slug":"compose-multiple-react-providers","title":"Compose multiple React providers","topics":"React"},{"category":"Tip","content":"\r\nUse `console.assert()` to print out something in the _Console_ when a given condition doesn't match.\r\n\r\n```js\r\nif (condition) {\r\n    // Do something\r\n} else {\r\n    console.log('Error message');\r\n}\r\n\r\n// Better\r\nconsole.assert(!condition, 'Error message');\r\n```\r\n\r\n### See also\r\n\r\n-   [Log a value to the Console](/log-a-value-to-the-console.html)\r\n-   [Log a variable in an arrow function](/log-a-variable-in-an-arrow-function.html)\r\n-   [Log a variable to the console using conditional breakpoints](/log-a-variable-to-the-console-using-conditional-breakpoints.html)\r\n-   [Log an array to the Console](/log-an-array-to-the-console.html)\r\n","slug":"conditional-logging-in-the-console","title":"Conditional logging in the Console","topics":"DevTools"},{"category":"Tip","content":"\r\nInstead of using the `Number()` constructor to convert a string to number, you can use the `+` operator:\r\n\r\n```js\r\n+'010'; // 10\r\n+'2e1'; // 20\r\n+'0xF'; // 15\r\n```\r\n","slug":"convert-string-to-number","title":"Convert string to number","topics":"JavaScript"},{"category":"Tip","content":"\r\nThe Chrome DevTools' Console will collapse and split a long variable into smaller ranges. The following screenshot shows how you see `console.log(range)` in the _Console_, where `range` is an array of numbers between 0 and 500.\r\n\r\n![long variable in the Console](/img/long-variable-in-console.png)\r\n\r\nIt's not easy to see the full value or copy the content to clipboard. Here is the tip to do that with ease:\r\n\r\n-   In the _Console_, right click the output and click _Store object as global variable_\r\n-   _Console_ creates a temporary variable, `temp1` for example, that holds the variable value\r\n-   Type `temp1 + ''` in the _Console_, and press the _Enter_ key\r\n\r\n_Console_ will try to convert the result to `String`. As a result, you get the full content of original variable.\r\n\r\nHere is the output which was omitted to fit in the screen:\r\n\r\n```js\r\n\"0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,...,\r\n490,491,492,493,494,495,496,497,498,499\"\r\n```\r\n","slug":"copy-a-long-variable-from-the-console","title":"Copy a long variable from the Console","topics":"DevTools"},{"category":"Tip","content":"\r\nOn macOS, when capturing a screenshot using the combination <kbd>cmd</kbd> + <kbd>shift</kbd> + <kbd>4</kbd> keys, the screenshot is then saved to the desktop.\r\nThe desktop soon will contain a lot of temporary files, since the screenshots are mostly used once.\r\n\r\nIn order to copy the screenshot directly to the clipboard rather then creating new file, we can press <kbd>ctrl</kbd> + <kbd>cmd</kbd> + <kbd>shift</kbd> + <kbd>4</kbd> when creating a screenshot.\r\nAs soon as the screenshot is available in the clipboard, we can press <kbd>ctrl</kbd> + <kbd>v</kbd> to paste or upload it if the application suports.\r\n\r\nIt's very helpful when we need the screenshot to report an issue, on GitHub for example, as you see in the following video.\r\n\r\n<video loop muted controls>\r\n    <source src=\"/img/copy-screenshot-to-clipboard.mp4\" type=\"video/mp4\">\r\n</video>\r\n\r\n### See also\r\n\r\n-   [Capture a screenshot without shadow on macOS](/capture-a-screenshot-without-shadow-on-macos.html)\r\n-   [Move the screenshot area on macOS](/move-the-screenshot-area-on-macos.html)\r\n","slug":"copy-screenshots-to-the-clipboard-on-macos","title":"Copy screenshots to the clipboard on macOS","topics":"macOS"},{"category":"Tip","content":"\r\nIf you want to copy the base64 data of an image, probably you will right-click on the associate element under the _Elements_ tab. However, there's no menu item there to copy the data URI.\r\n\r\nIn fact, Chrome DevTools provides the ability of doing that but it's a little bit hidden.\r\n\r\nUnder the _Sources_ tab, click the _Page_ tab and you will see all the images of the page listed in the `top > WEB-URL > image` branch where `WEB-URL` represents the website's URL.\r\n\r\nClicking an image will show it up on the right side. The _Copy image as data URI_ functionality is available when you right-click the image.\r\n\r\n![Copy image URI with DevTools](/img/copy-image-uri.png)\r\n","slug":"copy-the-base64-data-of-an-image","title":"Copy the base64 data of an image","topics":"DevTools"},{"category":"Tip","content":"\r\nOn macOS, we can copy the full path of a file by right-clicking the file, and move to the _Copy_ menu item of the context menu.\r\nPress and hold the _Alt_ key, then the menu item's label turns to _Copy ... as Pathname_.\r\n\r\nClicking the menu item will save the full path to the clipboard.\r\n\r\n<video loop muted controls>\r\n  <source src=\"/img/copy-path.mp4\" type=\"video/mp4\">\r\n</video>\r\n","slug":"copy-the-full-path-of-a-file-on-macos","title":"Copy the full path of a file on macOS","topics":"macOS"},{"category":"Tip","content":"\r\nSometimes we need to have a random file of given size. We can name some common examples such as\r\n\r\n-   Test the file upload functionality\r\n-   Test if the application is able to handle a large set of data\r\n\r\nOn Linux we can create an empty file of particular size with the `dd` command. The following command creates `sample.txt` file of `1GB`:\r\n\r\n```shell\r\n$ dd if=/dev/urandom of=sample.txt bs=1G count=1\r\n```\r\n\r\nThe file size is the result of `bs * count` in bytes.\r\n\r\n### See also\r\n\r\n-   [Create a file of any size](/create-a-file-of-any-size.html)\r\n","slug":"create-a-big-file-on-linux","title":"Create a big file on Linux","topics":"Command Line"},{"category":"Trick","content":"\r\nThere are two popular ways to create a custom cursor:\r\n\r\n-   Using an image\r\n-   Creating a canvas element and generate the base 64 image\r\n\r\nBoth approaches finally change the cursor by setting the image's URL to the `cursor` property:\r\n\r\n```css\r\n.custom-cursor {\r\n    cursor: url(/path/to/image.png), auto;\r\n}\r\n\r\n/* Or */\r\n.custom-cursor {\r\n    cursor: url('data:image/png;base64,...'), auto;\r\n}\r\n```\r\n\r\nTo create a custom emoji cursor, we can use an inline SVG element which displays the emoji at the center as following:\r\n\r\n```css\r\n.custom-cursor {\r\n    cursor: url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewport=\"0 0 48 48\" style=\"fill:black;font-size:24px\"><text y=\"50%\">🚀</text></svg>')\r\n            16 0, auto;\r\n}\r\n```\r\n\r\n### Demo\r\n\r\n:demo[]{title=\"Create a custom emoji cursor\" url=\"/demo/create-a-custom-emoji-cursor/index.html\"}\r\n","slug":"create-a-custom-emoji-cursor","title":"Create a custom emoji cursor","topics":"CSS"},{"category":"Tip","content":"\r\nBy default, an ordered list element (`ol` tag) will display the number for each item in the ascending order.\r\nThe first item is shown with the number 1. The second item comes with number 2, and so forth.\r\n\r\nThere are some cases that we would like to reverse the order of numbers, but the actual items are kept.\r\nCoundowns such as top 5 movies, top 10 songs, etc., are the best examples for the use case.\r\n\r\nTo do that, we just simply add the `reversed` attribute:\r\n\r\n```html\r\n<ol reversed>\r\n    <li>...</li>\r\n    <li>...</li>\r\n    <li>...</li>\r\n</ol>\r\n```\r\n\r\n> You can use the `start` attribute which indicates the start number\r\n\r\n### Demo\r\n\r\n_Top 10 movies rated on [IMDB](https://www.imdb.com/chart/top/)_\r\n\r\n:demo[]{title=\"Create a descending list of numbered items\" url=\"/demo/create-a-descending-list-of-numbered-items/index.html\"}\r\n","slug":"create-a-descending-list-of-numbered-items","title":"Create a descending list of numbered items","topics":"HTML"},{"category":"Tip","content":"\r\nIt's common to use an `a` tag to create a download link. The browser will open the file for some well-supported file types, such as image, pdf, etc.\r\n\r\nIf you want to enforce the browser to download the file, then use the HTML 5 `download` attribute. The value of attribute, if specified, will be used as the name of download file.\r\n\r\n```html\r\n<!-- Download instead of openning it -->\r\n<a href=\"/assets/document.pdf\" download>\r\n    <!-- Download it with new file name -->\r\n    <a href=\"/assets/document.pdf\" download=\"a copy of document.pdf\"></a\r\n></a>\r\n```\r\n\r\n> It's worth noting that the `download` attribute only works if the file belongs to the same domain as the current website. It doesn't have effect if the `href` attribute has the different origin to the site\r\n","slug":"create-a-download-link","title":"Create a download link","topics":"HTML"},{"category":"Tip","content":"\r\nSometimes we want to have big files which are used for testing purposes. It is often used to test uploading, downloading processes or speed of the network.\r\n\r\nmacOS comes with an useful command to create a file of any size:\r\n\r\n```shell\r\n$ mkfile FILE_SIZE FILE_NAME\r\n```\r\n\r\nIn the `FILE_SIZE` option, we can use one of possible suffixes including `b` (file size in bytes), `k` - kilobytes, `m` - megabytes or `g` - gigabytes.\r\n\r\nFor example, the following command produces an empty file named `big-file.ext` whose size is two gigabytes:\r\n\r\n```shell\r\n$ mkfile 2g big-file.ext\r\n```\r\n\r\n### See also\r\n\r\n-   [Create a big file on Linux](/create-a-big-file-on-linux.html)\r\n","slug":"create-a-file-of-any-size","title":"Create a file of any size","topics":"macOS"},{"category":"Tip","content":"\r\nQuite often, we use the `map` function to transform each item of an array into a new one. However, it's common to see an issue if we don't pass the parameter to the mapper function.\r\n\r\nFor example, the following code converts each item of array into a number:\r\n\r\n```js\r\n['1', '2', '3', '4', '5'].map((v) => parseInt(v));\r\n\r\n// [1, 2, 3, 4, 5]\r\n```\r\n\r\nHowever, the result isn't correct if we shorten it as below:\r\n\r\n```js\r\n['1', '2', '3', '4', '5'].map(parseInt);\r\n\r\n// [1, NaN, NaN, NaN, NaN]\r\n```\r\n\r\nThe issue is caused by the fact that the mapper function accepts three parameters which are the array item, index, and the array.\r\nCalling `.map(parseInt)` means that we pass the item index to `parseInt` as the second parameter. As a result, we will see `NaN`.\r\n\r\nThis leads to a requirement of building a function that [accepts only the first parameter](https://1loc.dev/#create-a-function-that-accepts-a-single-argument), and ignore the remaining parameters.\r\n\r\n```js\r\nconst unary = (fn) => (params) => fn(params);\r\n```\r\n\r\nThe `unary` function creates a wrapper of a function, and ignores all parameters except the first one. With that function in our hand, we can pass the mapper to the `map` function like this:\r\n\r\n```js\r\n['1', '2', '3', '4', '5'].map(unary(parseInt));\r\n\r\n// [1, 2, 3, 4, 5]\r\n```\r\n\r\n### See also\r\n\r\n-   [Accept any numbers of parameters](/accept-any-numbers-of-parameters.html)\r\n","slug":"create-a-function-that-accepts-a-single-parameter","title":"Create a function that accepts a single parameter","topics":"JavaScript"},{"category":"Tip","content":"\r\nA heading whose left and right sides are horizontal lines can be structured as a grid with three columns:\r\n\r\n```css\r\n.heading {\r\n    display: grid;\r\n    grid-template-columns: 1fr auto 1fr;\r\n    grid-gap: 1rem;\r\n    text-align: center;\r\n}\r\n```\r\n\r\n`1fr auto 1fr` indicates that the left and right columns will have the same widths and they'll take the remaining spaces.\r\n\r\nWe can use the `::before` and `::after` pseudo elements to represent the left and right sides of the heading respectively:\r\n\r\n```css\r\n.heading::before,\r\n.heading::after {\r\n    align-self: center;\r\n    border-top: 0.25rem double #e5e7eb;\r\n    content: '';\r\n}\r\n```\r\n\r\n### Demo\r\n\r\n:demo[]{title=\"Create a line-on-sides heading\" url=\"/demo/create-a-line-on-sides-heading/index.html\"}\r\n","slug":"create-a-line-on-sides-heading","title":"Create a line-on-sides heading","topics":"CSS"},{"category":"Tip","content":"\r\nTo create a multiline strings, the most common way is to concatenate them as shown below:\r\n\r\n```js\r\nconst multilineStrings = 'This is a\\n' + 'multiline\\n' + 'strings';\r\n```\r\n\r\nJoining an array of strings is another approach:\r\n\r\n```js\r\nconst multilineStrings = ['This is a', 'multiline', 'strings'].join('\\n');\r\n```\r\n\r\nES6 introduces an easier way to do that. It uses the template literal which is delimited by backticks:\r\n\r\n```js\r\nconst multilineStrings = `This is a\r\nmultiline\r\nstrings`;\r\n```\r\n\r\n### See also\r\n\r\n-   [Get rid of escaping quotes with template literal](/get-rid-of-escaping-quotes-with-template-literal.html)\r\n-   [Prevent a string from being escaped](/prevent-a-string-from-being-escaped.html)\r\n-   [Use template literal to concatenate strings](/use-template-literal-to-concatenate-strings.html)\r\n","slug":"create-a-multiline-strings","title":"Create a multiline strings","topics":"JavaScript"},{"category":"Tip","content":"\r\nDue to the fact that JavaScript APIs have their own specifications, not all the browsers support a particular specification at the same time.\r\nA JavaScript API can be implemented in a browser sooner or later than the other browsers.\r\n\r\nBecause of that, we have to provide a _patch_ version of API to make sure that it still works on browsers that don't support it natively. That kind of patch is called _polyfill_.\r\n\r\nThe following sample code provides a patch for the `startsWith` method which doesn't override the API if it exists:\r\n\r\n```js\r\nif (!String.prototype.startsWith) {\r\n    String.prototype.startsWith = function (searchString) {\r\n        // The implementation\r\n        // return `true` or `false`\r\n    };\r\n}\r\n```\r\n\r\nIf we provide a polyfill as a library, then we can use the following approach:\r\n\r\n```js\r\n// The polyfill implementation\r\nconst startsWithPolyfill = function (searchString) {\r\n    // ...\r\n    // return `true` or `false`\r\n};\r\n\r\nconst startsWith = String.prototype.startsWith || startsWithPolyfill;\r\n\r\n// Export the function\r\nexport default startsWith;\r\n```\r\n","slug":"create-a-polyfill","title":"Create a polyfill","topics":"JavaScript"},{"category":"Tip","content":"\r\nThere are a few ways to initialize an array with conditional elements.\r\n\r\n### Using the `push` function\r\n\r\n```js\r\nconst arr = ['foo', 'bar'];\r\nif (condition) {\r\n    arr.push('fuzz');\r\n}\r\n```\r\n\r\nWe can use the [short-circuits conditionals](/use-short-circuits-conditionals.html) to make it shorter:\r\n\r\n```js\r\ncondition && arr.push('fuzz');\r\n```\r\n\r\n### Using the `concat` function\r\n\r\n```js\r\nconst arr = ['foo', 'bar'].concat(condition ? 'fuzz' : []);\r\n```\r\n\r\nThe `push` and `concat` functions only work if we want to insert the elements at the end of the array.\r\n\r\n### Filtering the falsy values\r\n\r\n```js\r\nconst arr = ['foo', condition ? 'fuzz' : undefined, 'bar'].filter(Boolean);\r\n```\r\n\r\nThe array always inserts new item which can be the new element or `undefined` depending on whether or not the condition matches.\r\nAt the end, the `undefined` items are removed from the array.\r\n\r\nThis approach allows us to insert element at any position, however we have to be careful with [removing the _falsy_ values](https://1loc.dev/#remove-falsy-values-from-array) from the array because the original array can contains the falsy items.\r\n\r\n### Tip: using the spread operator\r\n\r\nBy using the spread operator (`...`), we can create an array with a single expression as following:\r\n\r\n```js\r\nconst arr = ['foo', ...(condition ? ['fuzz'] : []), 'bar'];\r\n```\r\n\r\nThe following code demonstrates a simple use case. It adds a product to the cart on an ecommerce website.\r\n\r\nTo do that, we have to check if the `products` property exists on the `cart` object first. If not, it will create an empty `products`. The conditional elements are the current `products`.\r\n\r\n```js\r\nif (!cart['products']) {\r\n    cart['products'] = [];\r\n}\r\ncart['products'].push(product);\r\n\r\n// Better version\r\ncart['products'] = [...(cart['products'] || []), product];\r\n```\r\n\r\nDo you want to see one more advanced example? The function below uses the spread and [comma operator](/shorten-codes-with-the-comma-operator.html) to [group an array of objects by a key](https://1loc.dev/#group-an-array-of-objects-by-a-key):\r\n\r\n```js\r\nconst groupBy = (arr, key) => arr.reduce((a, i) => ((a[i[key]] = [...(a[i[key]] || []), i]), a), {});\r\n```\r\n","slug":"create-an-array-with-conditional-elements","title":"Create an array with conditional elements","topics":"JavaScript"},{"category":"Tip","content":"\r\nThe HTML 5 `datalist` element comes in handly when you want to create an autocomplete input from a pre-defined list.\r\n\r\nThe element generates a dropdown that allow user to choose its options. In comparison to the normal `select` element, the `datalist` element provide the ability of filter the options.\r\n\r\nUsers also can enter what they want in the same way the normal text box does.\r\n\r\n```html\r\n<input list=\"demo__list\" />\r\n<datalist id=\"demo__list\">\r\n    <option value=\"...\" />\r\n    <option value=\"...\" />\r\n    <option value=\"...\" />\r\n    ...\r\n</datalist>\r\n```\r\n\r\n### Demo\r\n\r\n:demo[]{title=\"Create an autocomplete list with the datalist element\" url=\"/demo/create-an-autocomplete-list-with-the-datalist-element/index.html\"}\r\n","slug":"create-an-autocomplete-list-with-the-datalist-element","title":"Create an autocomplete list with the datalist element","topics":"HTML"},{"category":"Tip","content":"\r\nWe often use the bracket notation to add a dynamic key to an object.\r\n\r\n```js\r\nconst key = 'ages';\r\nconst person = {\r\n    name: 'John Doe',\r\n};\r\n\r\nperson[key] = 42;\r\n```\r\n\r\nES6 allows us to do that in a declarative way as following:\r\n\r\n```js\r\nconst key = 'ages';\r\nconst person = {\r\n    name: 'John Doe',\r\n    [key]: 42,\r\n};\r\n```\r\n\r\nHere is a simple usage. The sample code below returns the list of name and value of given input fields in a form:\r\n\r\n```js\r\n// `formEle` is the form element\r\nconst data = [...formEle.querySelectorAll('input')].map((field) => {\r\n    return {\r\n        [field.getAttribute('name')]: field.getAttribute('value'),\r\n    };\r\n});\r\n```\r\n","slug":"create-an-object-with-dynamic-keys","title":"Create an object with dynamic keys","topics":"JavaScript"},{"category":"Tip","content":"\r\nSometimes we want a given event of an element to happen once. Usually, it can be done by attaching a handler which removes itself:\r\n\r\n```js\r\nconst handler = (e) => {\r\n    // Do something ...\r\n    element.removeEventListener('click', handler);\r\n};\r\n\r\nelement.addEventListener('click', handler);\r\n```\r\n\r\nWe can use a named function expression to shorten the code a little bit:\r\n\r\n```js\r\nelement.addEventListener('click', function handler(e) {\r\n    // Do something ...\r\n\r\n    // Remove the handler\r\n    e.currentTarget.removeEventListener(e.type, handler);\r\n});\r\n```\r\n\r\nHowever, the [modern browsers](https://caniuse.com/once-event-listener) provide the new `once` option that makes things easier. We don't have to track the reference of the handler anymore.\r\n\r\n```js\r\nelement.addEventListener(\r\n    'click',\r\n    (e) => {\r\n        // Do something ...\r\n    },\r\n    {\r\n        once: true,\r\n    }\r\n);\r\n```\r\n","slug":"create-an-one-time-event-handler","title":"Create an one-time event handler","topics":"DOM, JavaScript"},{"category":"Tip","content":"\r\nIn the old days, we often used the `:before` and `:after` pseudo elements to create shapes, [triangles](https://csslayout.io/patterns/triangle-buttons), [arrows](https://csslayout.io/patterns/arrow-buttons) for example.\r\n\r\nNowadays, it can be accomplished with a single CSS property named `clip-path`. As the name implies, it creates a clipping region from the original element.\r\n\r\n> If you're looking for a complex shape, then check this amazing [CSS clip-path maker](https://bennettfeely.com/clippy)\r\n\r\n<style>\r\n.demo__shape {\r\n    background: rgba(0, 0, 0, .3);\r\n    height: 4rem;\r\n    margin-right: 0.5rem;\r\n    width: 4rem;\r\n}\r\n.demo__shape--arrow-left {\r\n    clip-path: polygon(40% 0%, 40% 20%, 100% 20%, 100% 80%, 40% 80%, 40% 100%, 0% 50%);\r\n}\r\n.demo__shape--arrow-right {\r\n    clip-path: polygon(0% 20%, 60% 20%, 60% 0%, 100% 50%, 60% 100%, 60% 80%, 0% 80%);\r\n}\r\n.demo__shape--bubble {\r\n    clip-path: polygon(0% 50%, 15% 60%, 15% 85%, 85% 85%, 85% 15%, 15% 15%, 15% 40%);\r\n}\r\n.demo__shape--circle {\r\n    clip-path: circle(50% at 50% 50%);\r\n}\r\n.demo__shape--decagon {\r\n    clip-path: polygon(50% 0%, 80% 10%, 100% 35%, 100% 70%, 80% 90%, 50% 100%, 20% 90%, 0% 70%, 0% 35%, 20% 10%);\r\n}\r\n.demo__shape--diamond {\r\n    clip-path: polygon(15% 50%, 50% 85%, 85% 50%, 50% 15%);\r\n}\r\n.demo__shape--ellipse {\r\n    clip-path: ellipse(25% 40% at 50% 50%);\r\n}\r\n.demo__shape--heptagon {\r\n    clip-path: polygon(50% 0%, 90% 20%, 100% 60%, 75% 100%, 25% 100%, 0% 60%, 10% 20%);\r\n}\r\n.demo__shape--hexagon {\r\n    clip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%);\r\n}\r\n.demo__shape--nonagon {\r\n    clip-path: polygon(50% 0%, 83% 12%, 100% 43%, 94% 78%, 68% 100%, 32% 100%, 6% 78%, 0% 43%, 17% 12%);\r\n}\r\n.demo__shape--octagon {\r\n    clip-path: polygon(30% 0%, 70% 0%, 100% 30%, 100% 70%, 70% 100%, 30% 100%, 0% 70%, 0% 30%);\r\n}\r\n.demo__shape--parallelogram {\r\n    clip-path: polygon(5% 20%, 25% 80%, 95% 80%, 75% 20%);\r\n}\r\n.demo__shape--pentagon {\r\n    clip-path: polygon(50% 0%, 100% 38%, 82% 100%, 18% 100%, 0% 38%);\r\n}\r\n.demo__shape--rectangle {\r\n    clip-path: polygon(0% 25%, 0% 75%, 100% 75%, 100% 25%);\r\n}\r\n.demo__shape--square {\r\n    clip-path: polygon(15% 15%, 15% 85%, 85% 85%, 85% 15%);\r\n}\r\n.demo__shape--star {\r\n    clip-path: polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%);\r\n}\r\n.demo__shape--trapezoid {\r\n    clip-path: polygon(25% 20%, 5% 80%, 95% 80%, 75% 20%);\r\n}\r\n.demo__shape--triangle-up {\r\n    clip-path: polygon(50% 0%, 0% 100%, 100% 100%);\r\n}\r\n.demo__shape--triangle-down {\r\n    clip-path: polygon(100% 0%, 0% 0%, 50% 100%);\r\n}\r\n.demo__shape--triangle-left {\r\n    clip-path: polygon(100% 0%, 0% 50%, 100% 100%);\r\n}\r\n.demo__shape--triangle-right {\r\n    clip-path: polygon(100% 50%, 0% 0%, 0% 100%);\r\n}\r\n.demo__shape--triangle-top-left {\r\n    clip-path: polygon(0 0, 0% 100%, 100% 0);\r\n}\r\n.demo__shape--triangle-top-right {\r\n    clip-path: polygon(0 0, 100% 100%, 100% 0);\r\n}\r\n.demo__shape--triangle-bottom-left {\r\n    clip-path: polygon(0 0, 0 100%, 100% 100%);\r\n}\r\n.demo__shape--triangle-bottom-right {\r\n    clip-path: polygon(100% 0, 0 100%, 100% 100%);\r\n}\r\n</style>\r\n\r\n### Arrow\r\n\r\n```css\r\n.arrow-left {\r\n    clip-path: polygon(40% 0%, 40% 20%, 100% 20%, 100% 80%, 40% 80%, 40% 100%, 0% 50%);\r\n}\r\n.arrow-right {\r\n    clip-path: polygon(0% 20%, 60% 20%, 60% 0%, 100% 50%, 60% 100%, 60% 80%, 0% 80%);\r\n}\r\n```\r\n\r\n<div style=\"display: flex; align-items: center\">\r\n    <div class=\"demo__shape demo__shape--arrow-left\"></div>\r\n    <div class=\"demo__shape demo__shape--arrow-right\"></div>\r\n</div>\r\n\r\n### Bubble\r\n\r\n```css\r\n.bubble {\r\n    clip-path: polygon(0% 50%, 15% 60%, 15% 85%, 85% 85%, 85% 15%, 15% 15%, 15% 40%);\r\n}\r\n```\r\n\r\n<div class=\"demo__shape demo__shape--bubble\"></div>\r\n\r\n### Circle\r\n\r\n```css\r\n.circle {\r\n    clip-path: circle(50% at 50% 50%);\r\n}\r\n```\r\n\r\n<div class=\"demo__shape demo__shape--circle\"></div>\r\n\r\n### Decagon\r\n\r\n```css\r\n.decagon {\r\n    clip-path: polygon(50% 0%, 80% 10%, 100% 35%, 100% 70%, 80% 90%, 50% 100%, 20% 90%, 0% 70%, 0% 35%, 20% 10%);\r\n}\r\n```\r\n\r\n<div class=\"demo__shape demo__shape--decagon\"></div>\r\n\r\n### Diamond\r\n\r\n```css\r\n.diamond {\r\n    clip-path: polygon(15% 50%, 50% 85%, 85% 50%, 50% 15%);\r\n}\r\n```\r\n\r\n<div class=\"demo__shape demo__shape--diamond\"></div>\r\n\r\n### Heptagon\r\n\r\n```css\r\n.heptagon {\r\n    clip-path: polygon(50% 0%, 90% 20%, 100% 60%, 75% 100%, 25% 100%, 0% 60%, 10% 20%);\r\n}\r\n```\r\n\r\n<div class=\"demo__shape demo__shape--heptagon\"></div>\r\n\r\n### Hexagon\r\n\r\n```css\r\n.hexagon {\r\n    clip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%);\r\n}\r\n```\r\n\r\n<div class=\"demo__shape demo__shape--hexagon\"></div>\r\n\r\n### Ellipse\r\n\r\n```css\r\n.ellipse {\r\n    clip-path: ellipse(25% 40% at 50% 50%);\r\n}\r\n```\r\n\r\n<div class=\"demo__shape demo__shape--ellipse\"></div>\r\n\r\n### Nonagon\r\n\r\n```css\r\n.nonagon {\r\n    clip-path: polygon(50% 0%, 83% 12%, 100% 43%, 94% 78%, 68% 100%, 32% 100%, 6% 78%, 0% 43%, 17% 12%);\r\n}\r\n```\r\n\r\n<div class=\"demo__shape demo__shape--nonagon\"></div>\r\n\r\n### Octagon\r\n\r\n```css\r\n.octagon {\r\n    clip-path: polygon(30% 0%, 70% 0%, 100% 30%, 100% 70%, 70% 100%, 30% 100%, 0% 70%, 0% 30%);\r\n}\r\n```\r\n\r\n<div class=\"demo__shape demo__shape--octagon\"></div>\r\n\r\n### Parallelogram\r\n\r\n```css\r\n.parallelogram {\r\n    clip-path: polygon(5% 20%, 25% 80%, 95% 80%, 75% 20%);\r\n}\r\n```\r\n\r\n<div class=\"demo__shape demo__shape--parallelogram\"></div>\r\n\r\n### Pentagon\r\n\r\n```css\r\n.pentagon {\r\n    clip-path: polygon(50% 0%, 100% 38%, 82% 100%, 18% 100%, 0% 38%);\r\n}\r\n```\r\n\r\n<div class=\"demo__shape demo__shape--pentagon\"></div>\r\n\r\n### Rectangle\r\n\r\n```css\r\n.rectangle {\r\n    clip-path: polygon(0% 25%, 0% 75%, 100% 75%, 100% 25%);\r\n}\r\n```\r\n\r\n<div class=\"demo__shape demo__shape--rectangle\"></div>\r\n\r\n### Square\r\n\r\n```css\r\n.square {\r\n    clip-path: polygon(15% 15%, 15% 85%, 85% 85%, 85% 15%);\r\n}\r\n```\r\n\r\n<div class=\"demo__shape demo__shape--square\"></div>\r\n\r\n### Star\r\n\r\n```css\r\n.star {\r\n    clip-path: polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%);\r\n}\r\n```\r\n\r\n<div class=\"demo__shape demo__shape--star\"></div>\r\n\r\n### Trapezoid\r\n\r\n```css\r\n.trapezoid {\r\n    clip-path: polygon(25% 20%, 5% 80%, 95% 80%, 75% 20%);\r\n}\r\n```\r\n\r\n<div class=\"demo__shape demo__shape--trapezoid\"></div>\r\n\r\n### Triangle\r\n\r\n```css\r\n.triangle-up {\r\n    clip-path: polygon(50% 0%, 0% 100%, 100% 100%);\r\n}\r\n.triangle-down {\r\n    clip-path: polygon(100% 0%, 0% 0%, 50% 100%);\r\n}\r\n.triangle-left {\r\n    clip-path: polygon(100% 0%, 0% 50%, 100% 100%);\r\n}\r\n.triangle-right {\r\n    clip-path: polygon(100% 50%, 0% 0%, 0% 100%);\r\n}\r\n.triangle-top-left {\r\n    clip-path: polygon(0 0, 0% 100%, 100% 0);\r\n}\r\n.triangle-top-right {\r\n    clip-path: polygon(0 0, 100% 100%, 100% 0);\r\n}\r\n.triangle-bottom-left {\r\n    clip-path: polygon(0 0, 0 100%, 100% 100%);\r\n}\r\n.triangle-bottom-right {\r\n    clip-path: polygon(100% 0, 0 100%, 100% 100%);\r\n}\r\n```\r\n\r\n<div style=\"display: flex; align-items: center\">\r\n    <div class=\"demo__shape demo__shape--triangle-up\"></div>\r\n    <div class=\"demo__shape demo__shape--triangle-down\"></div>\r\n    <div class=\"demo__shape demo__shape--triangle-left\"></div>\r\n    <div class=\"demo__shape demo__shape--triangle-right\"></div>\r\n    <div class=\"demo__shape demo__shape--triangle-top-left\"></div>\r\n    <div class=\"demo__shape demo__shape--triangle-top-right\"></div>\r\n    <div class=\"demo__shape demo__shape--triangle-bottom-left\"></div>\r\n    <div class=\"demo__shape demo__shape--triangle-bottom-right\"></div>\r\n</div>\r\n","slug":"create-shapes-with-the-clip-path-property","title":"Create shapes with the clip path property","topics":"CSS"},{"category":"Tip","content":"\r\nWhen users print a web page, they will not see the actual links. It would be more useful if a link displays both the text and its link.\r\n\r\nWe can do it by including the link in the `:after` element:\r\n\r\n```css\r\n@media print {\r\n    a::after {\r\n        content: ' (' attr(href) ') ';\r\n    }\r\n}\r\n```\r\n\r\nIn the print mode, users will see the link included right after its content:\r\n\r\n```html\r\n<!-- Normal mode -->\r\n<a href=\"https://getfrontend.tips\">Front-End Tips</a>\r\n\r\n<!-- Print mode -->\r\n<a href=\"https://getfrontend.tips\">Front-End Tips (https://getfrontend.tips)</a>\r\n```\r\n","slug":"display-links-in-the-print-mode","title":"Display links in the print mode","topics":"CSS"},{"category":"Best practice","content":"\r\nIt is not recommended to add a custom method to primitive objects such as `Array`, `Boolean`, `Number`, `String`, etc.\r\nSince the `for ... in` statement loops over the enumerable properties, it will include new methods which are added to the prototype.\r\n\r\n```js\r\nArray.prototype.isEmpty = function () {\r\n    return (this.length = 0);\r\n};\r\n\r\nconst a = ['cat', 'dog', 'mouse'];\r\nfor (let i in a) {\r\n    console.log(i); // '0', '1', '2', 'isEmpty'\r\n}\r\n```\r\n","slug":"do-not-add-custom-methods-to-primitive-objects","title":"Do not add custom methods to primitive objects","topics":"JavaScript"},{"category":"Best practice","content":"\r\nWhen developing a reusable component, we should follow the rule: the component should look like the same regardless where it's placed.\r\n\r\nFor example, the `margin` style in the following CSS is used for a specific use case where we want to have a space between `.item` and its sibling element.\r\n\r\n```css\r\n.item {\r\n    margin: 1rem 0;\r\n\r\n    /* Other styles */\r\n    ...;\r\n}\r\n```\r\n\r\nIt isn't recommended because it could be broken when you use `item` in another container. Instead, you should use a wrapper to separate the styles of element and its container:\r\n\r\n```css\r\n.item-wrapper {\r\n    margin: 1rem 0;\r\n}\r\n```\r\n\r\nThe `item` class can be reused in different places without breaking the look and feel:\r\n\r\n```html\r\n<div class=\"item-wrapper\">\r\n    <div class=\"item\">...</div>\r\n</div>\r\n\r\n<!-- Used in another wrapper -->\r\n<div class=\"other-wrapper\">\r\n    <div class=\"item\">...</div>\r\n</div>\r\n```\r\n","slug":"do-not-mix-styles-of-an-element-with-its-container","title":"Don't mix styles of an element with its container","topics":"CSS"},{"category":"Best practice","content":"\r\nIt's quite often that we pass the index parameter when using string manipulation functions such as `slice`, `splice`, `substr` or `substring`.\r\n\r\nLet's take a look at a simple example which [converts a given date](https://1loc.dev/#convert-a-date-to-yyyy-mm-dd-format) object to _YYYY-MM-DD_ format.\r\n\r\nGiven a `date` object, we can get the string representing the date in the ISO format:\r\n\r\n```js\r\ndate.toISOString();\r\n// '2021-03-09T01:42:46.002Z'\r\n```\r\n\r\nThe output is constructed by different parts which starts with the full date, `2021-03-09` as we see in the example above.\r\nSo, it's easy to get the full date by extracting it from the ISO format:\r\n\r\n```js\r\nconst format = (date) => date.toISOString().slice(0, 10);\r\n```\r\n\r\n`10` is called a magic number, because when the other people look at the code, they don't have idea where the number comes from.\r\n\r\nRather than using a magic number, it's recommended to explain what it is and how it's calculated:\r\n\r\n```js\r\n// The better version\r\nconst FULL_DATE_LENGTH = 'YYYY-MM-DD'.length;\r\n\r\nconst format = (date) => date.toISOString().slice(0, FULL_DATE_LENGTH);\r\n```\r\n\r\n### See also\r\n\r\n-   [Keep the calculation of a magic number](/keep-the-calculation-of-a-magic-number.html)\r\n","slug":"do-not-use-magic-numbers-when-manipulating-strings","title":"Do not use magic numbers when manipulating strings","topics":"JavaScript"},{"category":"Best practice","content":"\r\nGiven a form element, we often call the `submit()` method to submit the form after validating its fields.\r\n\r\nIf the submit button of the form has either `name=\"submit\"` or `id=\"submit\"` attribute, then `formEle.submit` will return the submit button instance.\r\nAs a result, `formEle.submit()` throws an exception because it's not an actual function anymore.\r\n\r\nWe can face the similar issue when using special properties of form such as `reset`, `length`, `method`.\r\n\r\n```html\r\n<!-- Do NOT -->\r\n<button type=\"submit\" name=\"submit\">Submit</button>\r\n<button type=\"submit\" id=\"submit\">Submit</button>\r\n\r\n<!-- Do -->\r\n<button type=\"submit\" name=\"submitButton\">Submit</button>\r\n```\r\n\r\n### See also\r\n\r\n-   [Avoid to use colons and periods in the id attribute](/avoid-to-use-colons-and-periods-in-the-id-attribute.html)\r\n","slug":"do-not-use-submit-to-name-a-submit-button","title":"Do not use submit to name a submit button","topics":"HTML"},{"category":"Best practice","content":"\r\nUsing the `if` statement is a common technique to deal with conditional logics. The code flow is split into different branches based on a given logic.\r\n\r\nLet's take a look at a simple function that [suffixes a given hour](https://1loc.dev/#add-am-pm-suffix-to-an-hour) number with _am_ or _pm_. The suffix is determined based on which range the hour belongs to as you can see in the following table:\r\n\r\n| Hour    | With suffix |\r\n| ------- | ----------- |\r\n| 0       | 12am        |\r\n| 1 - 11  | 1am - 11am  |\r\n| 12      | 12pm        |\r\n| 13 - 23 | 1pm - 11pm  |\r\n\r\nAn initial implementation of the function could look like:\r\n\r\n```js\r\nconst suffixAmPm = (hour) => {\r\n    if (hour === 0) {\r\n        return '12am';\r\n    } else {\r\n        if (hour < 12) {\r\n            return `${hour}am`;\r\n        } else {\r\n            if (hour === 12) {\r\n                return '12pm';\r\n            } else {\r\n                return `${hour % 12}pm`;\r\n            }\r\n        }\r\n    }\r\n};\r\n```\r\n\r\nImagine how the code looks like if we use multiple nested `if` statements. It's very hard to follow and maintain. Rather than using `else` or nested `if` statements, the function can return as soon as the condition matches:\r\n\r\n```js\r\nconst fn = (args) => {\r\n    if (condition) {\r\n        return 'foo';\r\n    } else {\r\n        // Long implementation\r\n        return 'bar';\r\n    }\r\n};\r\n\r\n// Better\r\nconst fn = (args) => {\r\n    if (condition) {\r\n        return 'foo';\r\n    }\r\n\r\n    // Long implementation\r\n    // Don't need to wrap within an `else`\r\n    return 'bar';\r\n};\r\n```\r\n\r\nUsing this practice, a new version of the `suffixAmPm` function looks like:\r\n\r\n```js\r\nconst suffixAmPm = (hour) => {\r\n    if (hour === 0) {\r\n        return '12am';\r\n    }\r\n\r\n    if (hour < 12) {\r\n        return `${hour}am`;\r\n    }\r\n\r\n    if (hour === 12) {\r\n        return '12pm';\r\n    }\r\n\r\n    return `${hour % 12}pm`;\r\n};\r\n```\r\n\r\n### See also\r\n\r\n-   [Replace multiple if statements with a lookup table](/replace-multiple-if-statements-with-a-lookup-table.html)\r\n-   [Replace multiple if statements with a single switch statement](/replace-multiple-if-statements-with-a-single-switch-statement.html)\r\n-   [Use Array.includes for multiple conditionals](/use-array-includes-for-multiple-conditionals.html)\r\n","slug":"early-return","title":"Early return","topics":"JavaScript"},{"category":"Trick","content":"\r\nIn ES6, the default value of a parameter is evaluated if the parameter is missing. It allows us to enfore that a given parameter is required.\r\n\r\n```js\r\nconst required = () => {\r\n    throw new Error('Missing parameter');\r\n};\r\n\r\nconst getAges = (yearOfBirth = required()) => new Date().getFullYear() - yearOfBirth;\r\n```\r\n\r\nCalling `getAges()` without parameter will throw the exception `Missing parameter`.\r\n","slug":"enforce-required-parameters","title":"Enforce required parameters","topics":"JavaScript"},{"category":"Tip","content":"\r\nCSS class names can't contain the `:` character. For example, it's not possible to declare the following class in CSS:\r\n\r\n```css\r\n.lg:flex {\r\n    ...\r\n}\r\n```\r\n\r\nHowever we can use the `\\` character to correct it:\r\n\r\n```css\r\n.lg\\:flex {\r\n    ...\r\n}\r\n```\r\n\r\nThe class name is usable in HTML as usual:\r\n\r\n```html\r\n<div class=\"lg:flex\">    ...</div>\r\n```\r\n\r\nUsing `\\` to escape CSS class names has been used a lot in some CSS frameworks such as [Tailwind](https://tailwindcss.com).\r\n","slug":"escape-css-class-names","title":"Escape CSS class names","topics":"CSS"},{"category":"Tip","content":"\r\nBy default, when clicking a file input (`<input type=\"file\" />`) the browser will list all files in the destination folder.\r\n\r\nThe file input provides the [accept attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept) which hints the browser to list particular file types. The attribue value can be one or many file extensions, MIME types, separated by a comma.\r\n\r\nFor example, the input asking users for choosing an avatar looks like:\r\n\r\n```html\r\n<input type=\"file\" accept=\".png, .jpg, .jpeg\" />\r\n\r\n<!-- Or -->\r\n<input type=\"file\" accept=\"image/png, image/jpeg\" />\r\n```\r\n\r\n> The `accept` attribute does NOT prevent user from selecting a file whose type isn't in the list. Do NOT use it to validate the selected file\r\n","slug":"filter-file-types-of-a-file-input","title":"Filter file types of a file input","topics":"HTML"},{"category":"Tip","content":"\r\nThe page has a scrollbar but you don't know which element on page creates that scrollbar.\r\nThe Firefox Developer Tools allows us to see all elements causing overflow.\r\n\r\n-   In Firefox, open its Developer Tools\r\n-   Under the _Inspector_ tab, if an element has a scrollbar (by using either `overflow: scroll` or `overflow: auto` but the content is longer than the element dimension), it will be shown with a `scroll` badge.\r\n\r\nIn the following screenshot, the highlighted element is displayed with the `scroll` badge indicating that it produces the scrollbar. Clicking the `scroll` badge will reveal the associate element.\r\n\r\n![Find scrollable elements](/img/scrollable-overflow.png)\r\n","slug":"find-scrollable-elements","title":"Find scrollable elements","topics":"Firefox DevTools"},{"category":"Tip","content":"\r\nIf your repositories are stored on GitHub, you probably often receive notifications from GitHub asking to update a given npm package.\r\n\r\nIt's a great feature as GitHub keeps your repository up-to-date and provides the patches to fix possible security issues. However, it doesn't tell you the actual packages that need to be updated.\r\n\r\nIn order to see which the root package should be updated due to one of its dependencies updates, you can use the `npm ls` command.\r\n\r\n```shell\r\n$ npm ls acorn\r\n\r\n├─┬ @11ty/eleventy-plugin-syntaxhighlight@3.0.6\r\n│ └─┬ jsdom@16.4.0\r\n│   ├─┬ acorn-globals@6.0.0\r\n│   │ └── acorn@7.4.1 deduped\r\n│   └── acorn@7.4.1\r\n└─┬ @11ty/eleventy@0.11.1\r\n  └─┬ pug@2.0.4\r\n    ├─┬ pug-code-gen@2.0.2\r\n    │ └─┬ with@5.1.1\r\n    │   ├─┬ acorn-globals@3.1.0\r\n    │   │ └── acorn@4.0.13\r\n    │   └── acorn@3.3.0\r\n    └─┬ pug-lexer@4.1.0\r\n      └─┬ is-expression@3.0.0\r\n        └── acorn@4.0.13\r\n```\r\n","slug":"find-the-root-npm-package-to-update","title":"Find the root NPM package to update","topics":"NPM"},{"category":"Tip","content":"\r\nIn Visual Studio Code, we can make given CSS declarations foldable with the region markers.\r\n\r\nJust wrap the declarations between `/*#region*/` and `/*#endregion*/` if you're using CSS, SCSS or Less.\r\n\r\nSCSS and Less also accept `//` as a valid CSS comment, hence you can use `// #region` and `// #endregion` in the SCSS/Less files.\r\n\r\n```css\r\n/* === Header === */\r\n/* #region */\r\n\r\n/* The CSS styles for header go here */\r\n\r\n/* #endregion */\r\n\r\n/* === Footer === */\r\n/* #region */\r\n\r\n/* The CSS styles for footer go here */\r\n\r\n/* #endregion */\r\n\r\n/* === Responsive === */\r\n/* #region */\r\n\r\n/* The responsive styles go here */\r\n\r\n/* #endregion */\r\n```\r\n\r\nThe following screenshot shows how Visual Studio Code helps us organize the [CSS of this site](https://github.com/phuoc-ng/frontend-tips/blob/main/css/index.css):\r\n\r\n![Fold CSS declarations with region markers](/img/fold-css-declarations.png)\r\n","slug":"fold-css-declarations-with-region-markers","title":"Fold CSS declarations with region markers","topics":"CSS, Visual Studio Code"},{"category":"Tip","content":"\r\nTo reduce the loading time, the browsers often cache static assets such as images, JavaScript, CSS files, etc. A favicon is one of them.\r\n\r\nSome browsers, Chrome for example, maintain a separate storage to cache favicons because they're frequently used in different places such as bookmarks, history.\r\n\r\nWhen we replace the favicon with a new one, our visitors probably still see the old one, even if they clear the browser cache.\r\n\r\nTo prevent this from happening, we can always force the browsers to download the new favicon by adding a query parameter:\r\n\r\n```html\r\n<link rel=\"icon\" href=\"/favicon.png?ver=2\" />\r\n```\r\n\r\nOf course, it's up to you to pick another name and value of parameter.\r\n","slug":"force-the-browsers-to-download-new-favicon","title":"Force the browsers to download new favicon","topics":"HTML"},{"category":"Tip","content":"\r\nWe can take the advantage of the [Intl.ListFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat) object to format a list for a given locale:\r\n\r\n```js\r\nconst people = ['Foo', 'Bar', 'Fuzz'];\r\n\r\nnew Intl.ListFormat('en', { type: 'conjunction' }).format(people);\r\n// 'Foo, Bar, and Fuzz'\r\n\r\nnew Intl.ListFormat('en-GB', { type: 'disjunction' }).format(people);\r\n// 'Foo, Bar, or Fuzz'\r\n```\r\n","slug":"format-a-list","title":"Format a list","topics":"JavaScript"},{"category":"Tip","content":"\r\nGiven a number, we can format it as a currency string without using an external libary.\r\n\r\nThe `NumberFormat` API provides the easy way to format a currency of a given country:\r\n\r\n```js\r\nconst formatter = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n    minimumFractionDigits: 2,\r\n});\r\n```\r\n\r\nThe optional `minimumFractionDigits` parameter indicates the minium number of digits in the fraction part. Calling the `format` function will format the input, and prefix or suffix the currency depending on the country.\r\n\r\n```js\r\nformatter.format(2345); // '$2,345.00'\r\nformatter.format('2345'); // '$2,345.00'\r\nformatter.format('10000000'); // '$10,000,000.00'\r\n```\r\n","slug":"format-a-number-as-a-currency-string","title":"Format a number as a currency string","topics":"JavaScript"},{"category":"Tip","content":"\r\nThe following line returns all characters of a given string:\r\n\r\n```js\r\nconst message = 'Hello';\r\nconst chars = [...message]; // ['H', 'e', 'l', 'l', 'o']\r\n```\r\n\r\nIf you want to get the first and the remaining characters of a string, then use ES6 destructing:\r\n\r\n```js\r\nconst [first, ...rest] = message;\r\n// first = 'H'\r\n// rest = ['e', 'l', 'l', 'o']\r\n```\r\n\r\nWe can use it to [capitalize](https://1loc.dev/#capitalize-a-string) or [decapitalize](https://1loc.dev/#decapitalize-a-string) a string:\r\n\r\n```js\r\ncapitalize = ([first, ...rest]) => `${first.toUpperCase()}${rest.join('')}`;\r\n\r\ndecapitalize = ([first, ...rest]) => `${first.toLowerCase()}${rest.join('')}`;\r\n\r\ncapitalize('hello world'); // 'Hello world'\r\n```\r\n\r\n### See also\r\n\r\n-   [Ignore items from array destructuring](/ignore-items-from-array-destructuring.html)\r\n-   [Pick the first and last items of an array](/pick-the-first-and-last-items-of-an-array.html)\r\n","slug":"get-characters-of-a-string","title":"Get characters of a string","topics":"JavaScript"},{"category":"Tip","content":"\r\nYou can use the template literal syntax in ES6 to get rid of escaping quote. For example:\r\n\r\n```js\r\n// Instead of\r\nconst message = \"It's a message\";\r\n\r\n// We can do this which is more convenient\r\nconst message = `It's a message`;\r\n```\r\n\r\n### See also\r\n\r\n-   [Create a multiline strings](/create-a-multiline-strings.html)\r\n-   [Prevent a string from being escaped](/prevent-a-string-from-being-escaped.html)\r\n-   [Use template literal to concatenate strings](/use-template-literal-to-concatenate-strings.html)\r\n","slug":"get-rid-of-escaping-quotes-with-template-literal","title":"Get rid of escaping quotes with template literal","topics":"JavaScript"},{"category":"Tip","content":"\r\nThere are a few ways to get the current timestamp. All method return the number of milliseconds:\r\n\r\n```js\r\nnew Date().getTime();\r\n\r\nDate.now();\r\n\r\n// These method are the same\r\n// The unary operator (`+`) calls the `valueOf` method automatically\r\n+new Date();\r\nnew Date().valueOf();\r\n```\r\n\r\n> Take a look at this [snippet](https://1loc.dev/#get-the-current-timestamp-in-seconds) if you want to get the current time in seconds\r\n","slug":"get-the-current-timestamp","title":"Get the current timestamp","topics":"JavaScript"},{"category":"Tip","content":"\r\nWe probably know that the `cd` command can be used to go to the given directory:\r\n\r\n```shell\r\n$ cd /path/to/directory\r\n```\r\n\r\nIf you work with the terminal more often, then you might need to switch back and forth between different directories. If you see that typing the full path in the `cd` command is not convenient, then you can replace the full path with `-`.\r\n\r\nThe following command will bring you to the previous working directory:\r\n\r\n```shell\r\n$ cd -\r\n```\r\n\r\n### See also\r\n\r\n-   [Checkout the previous branch](/checkout-the-previous-branch)\r\n","slug":"go-to-the-previous-directory","title":"Go to the previous directory","topics":"Command Line"},{"category":"Tip","content":"\r\nWe can hide an element by inspecting it with Chrome DevTools, right-clicking the element under the _Elements_ tab, and choosing the _Hide element_ menu from the context menu.\r\n\r\n![Hide an element](/img/hide-element.png)\r\n\r\nIf you're a fan of using the shortcut, then pressing the <kbd>h</kbd> key has the same effect.\r\n\r\n<video loop muted controls>\r\n    <source src=\"/img/hide-element.mp4\" type=\"video/mp4\">\r\n</video>\r\n\r\nBoth ways add a specical CSS class named `__web-inspector-hide-shortcut__` to the element:\r\n\r\n```css\r\n.__web-inspector-hide-shortcut__ {\r\n    visibility: hidden !important;\r\n}\r\n```\r\n\r\n> Setting `display: none`, `opacity: 0`, and `visibility: hidden` are the common ways to hide an element with CSS. If you want to see the differences between them, take a look at this [post](https://thisthat.dev/display-none-vs-opacity-0-vs-visibility-hidden)\r\n","slug":"hide-an-element-with-chrome-devtools","title":"Hide an element with Chrome DevTools","topics":"DevTools"},{"category":"Tip","content":"\r\nThe semantic `<mark>` element provides the ability of highlighting text inside an element. Highlighting keywords in search results is a popular example of using the `<mark>` element.\r\n\r\n```html\r\nSmooth <mark>scrolling</mark> with pure CSS\r\n```\r\n\r\n### Demo\r\n\r\n:demo[]{title=\"Highlight text with the mark element\" url=\"/demo/highlight-text-with-the-mark-element/index.html\"}\r\n","slug":"highlight-text-with-the-mark-element","title":"Highlight text with the mark element","topics":"HTML"},{"category":"Tip","content":"\r\nBy default, CSS attribute selectors are case-sensitive. It means that `a[href$=\".png\"]` has effect with the links whose extensions are `.png` only.\r\n\r\nImagine that you're building a files management application. It would add an icon to a file based on its extension. For example, the following CSS inserts an icon to any `.png` file.\r\n\r\n```css\r\na[href$='.png']:after {\r\n    content: url(/img/png.svg);\r\n}\r\n```\r\n\r\nIn reality, the files are uploaded by the users and we can't control the file extensions. A png file can be named as `.png`, `.PNG`, `.pNG`.\r\n\r\nIn order to accept all of these variants, we can add `i` right before `]` in the selector.\r\n\r\n```css\r\na[href$='.png' i]:after {\r\n    content: url(/img/png.svg);\r\n}\r\n```\r\n\r\n### See also\r\n\r\n-   [Add an icon to external links](/add-an-icon-to-external-links.html)\r\n","slug":"ignore-case-sensitivity-in-a-css-attribute-selector","title":"Ignore case sensitivity in a CSS attribute selector","topics":"CSS"},{"category":"Tip","content":"\r\nWhen destructuring an array, you can skip certain items by using blanks:\r\n\r\n```js\r\nconst dateTime = '2021-02-28T14:57:00';\r\n\r\n// Ignore the date part\r\nconst [, time] = dateTime.split('T');\r\n\r\n// Ignore the seconds\r\nconst [hours, minutes] = time.split(':');\r\n\r\nhours; // '14'\r\nminutes; // '57'\r\n```\r\n\r\nIf you are working in a team, then it's a good idea to add comments for skipped items. It also makes the code more readable:\r\n\r\n```js\r\nconst [\r\n    ,\r\n    // date\r\n    time,\r\n] = dateTime.split('T');\r\n\r\nconst [hours, minutes /* seconds */] = time.split(':');\r\n```\r\n\r\n### See also\r\n\r\n-   [Get characters of a string](/get-characters-of-a-string.html)\r\n-   [Pick the first and last items of an array](/pick-the-first-and-last-items-of-an-array.html)\r\n-   [Use an underscore to name unused argument](/use-an-underscore-to-name-unused-argument.html)\r\n","slug":"ignore-items-from-array-destructuring","title":"Ignore items from array destructuring","topics":"JavaScript"},{"category":"Tip","content":"\r\nThere are some CSS properties whose values contain numbers, such as `height`, `font-size`, `margin`, `padding`, `width`, etc.\r\nRather than changing the value manually, we can quickly increase or decrease the value by using one of the following key combinations:\r\n\r\n| Key combinations                   | Value change       |\r\n| ---------------------------------- | ------------------ |\r\n| <kbd>↑</kbd>                       | Increase by 1      |\r\n| <kbd>↓</kbd>                       | Decrease by 1      |\r\n| <kbd>alt</kbd> + <kbd>↑</kbd>      | Increase by 0.1    |\r\n| <kbd>alt</kbd> + <kbd>↓</kbd>      | Decrease by 0.1    |\r\n| <kbd>shift</kbd> + <kbd>↑</kbd>    | Increase by 10     |\r\n| <kbd>shift</kbd> + <kbd>↓</kbd>    | Decrease by 10     |\r\n| <kbd>cmd</kbd> + <kbd>↑</kbd>      | Increase by 100    |\r\n| <kbd>cmd</kbd> + <kbd>↓</kbd>      | Decrease by 100    |\r\n\r\nOn Windows and Linux, the <kbd>cmd</kbd> key should be replaced with the <kbd>ctrl</kbd> key.\r\n\r\n<video loop muted controls>\r\n    <source src=\"/img/increase-decrease-values-devtools.mp4\" type=\"video/mp4\">\r\n</video>\r\n","slug":"increase-or-decrease-css-values-with-chrome-devtools","title":"Increase or decrease CSS values with Chrome DevTools","topics":"DevTools"},{"category":"Tip","content":"\r\nThe following CSS gives a red outline to any img having a missing or blank alt attribute:\r\n\r\n```css\r\nimg:not([alt]),\r\nimg[alt=''] {\r\n    outline: 8px solid red;\r\n}\r\n```\r\n\r\nIf you are using Visual Studio Code, you can install the [webhint extension](https://marketplace.visualstudio.com/items?itemName=webhint.vscode-webhint). It will automatically detect the issue and show the details when you hover on the element.\r\n\r\n![webhint image](/img/webhint-img.png)\r\n","slug":"indicate-img-elements-that-miss-alt-attribute","title":"Indicate img elements that miss alt attribute","topics":"A11y, Accessibility, CSS"},{"category":"Tip","content":"\r\nTo inspect an element with Chrome DevTools, we usually right-click the element and choose _Inspect_ from the context menu.\r\nHowever, it doesn't work with a dynamic element that is displayed when we hover on a given element. A JavaScript tooltip is a common example.\r\n\r\nThere are a few ways to inspect that kind of elements.\r\n\r\n### Trigger the mouseover event\r\n\r\n-   Right-click the original element, and choose the _Inspect_ menu item\r\n-   Click the _Console_ tab\r\n-   Fire the `mouseover` event by excuting the following code in the _Console_:\r\n\r\n```js\r\n$0.dispatchEvent(\r\n    new MouseEvent('mouseover', {\r\n        view: window,\r\n        bubbles: true,\r\n        cancelable: true,\r\n    })\r\n);\r\n```\r\n\r\n> `$0` represents the current inspected element\r\n\r\nIt simulates the `mouseover` event that is supposed to happen when we hover on the original element.\r\n\r\n### Pause the script execution\r\n\r\n-   Open the _Chrome Developer Tools_, and click the _Sources_ tab\r\n-   Hover on the target element, and click the _F8_ key\r\n-   Move the mouse over the target element\r\n-   Activate the _Elements_ tab, and you will see the dynamic element shown up here\r\n\r\n### Use debugger\r\n\r\nIt's similar to the previous way.\r\n\r\n-   In the _Console_, execute the following code:\r\n\r\n```js\r\nhandler = (e) => {\r\n    if (e.key === 'Enter') debugger;\r\n};\r\ndocument.addEventListener('keydown', handler);\r\n```\r\n\r\nRunning `debugger` here will pause the script execution when we press the _Enter_ key. Of course, you can replace it with other key.\r\n\r\n-   Hover on the target element, and click the _Enter_ key\r\n-   The dynamic element is displayed and visible under the _Elements_ tab\r\n\r\nOnce you don't want to monitor the dynamic element anymore, you can [stop listening](https://htmldom.dev/attach-or-detach-an-event-handler) to the `keydown` event:\r\n\r\n```js\r\ndocument.removeEventListener('keydown', handler);\r\n```\r\n\r\n### Track subtree modifications\r\n\r\n-   Open the _Chrome Developer Tools_, and click the _Elements_ tab\r\n-   Right-click the `body` element, and choose _Break on > subtree modifications_ from the context menu\r\n\r\n![Break on subtree modifications](/img/subtree-modifications.png)\r\n\r\n> If the dynamic element, a tooltip for example, is generated in the parent element of the target element, then you should choose the parent instead of the `body` element\r\n\r\n-   Move the mouse over the target element\r\n-   You will see the dynamic element shown in the _Elements_ tab\r\n","slug":"inspect-an-element-shown-on-hover","title":"Inspect an element shown on hover","topics":"DevTools"},{"category":"Best practice","content":"\r\nLet's say that we want to calculate the number of [difference days](https://1loc.dev/#calculate-the-number-of-difference-days-between-two-dates) between two given dates.\r\nBy simply using the `-` operator, it's easy for us to calculate the differences between two date objects, `date` and `otherDate` for example:\r\n\r\n```js\r\nconst diff = Math.abs(date - otherDate);\r\n```\r\n\r\nThe function returns the number of milliseconds. In order to get the number of days, we have to divide it by `86400000`:\r\n\r\n```js\r\nMath.ceil(diff / 86400000);\r\n```\r\n\r\nWe know that `86400000` is the total number of milliseconds in a day. The code is still working fine until there's another people on the team looking at it, and it takes them time to realize what the number `86400000` is.\r\n\r\nTo make the code more readable and easy to maintain, we should replace the magic number with its calculation:\r\n\r\n```js\r\n// Better version\r\nconst diffDays = (date, otherDate) => Math.ceil((Math.abs(date - otherDate) / 1000) * 60 * 60 * 24);\r\n```\r\n\r\nIf the number is used across different places, for example when we create a library for manipulating dates, then it's recommended to declare the magic number as a constant:\r\n\r\n```js\r\n// The best version\r\n// constants.js\r\nconst MILLISECOND_DAY = 1000 * 60 * 60 * 24;\r\nexport { MILLISECOND_DAY };\r\n```\r\n\r\nThen reuse it later:\r\n\r\n```js\r\nimport { MILLISECOND_DAY } from './constants';\r\n\r\nconst diffDays = (date, otherDate) => Math.ceil(Math.abs(date - otherDate) / MILLISECOND_DAY);\r\n```\r\n\r\n### See also\r\n\r\n-   [Do not use magic numbers when manipulating strings](/do-not-use-magic-numbers-when-manipulating-strings.html)\r\n","slug":"keep-the-calculation-of-a-magic-number","title":"Keep the calculation of a magic number","topics":"JavaScript"},{"category":"Tip","content":"\r\nBy default, the browser will download all images found on a page no matter where they are located. To improve the user experience, we often use the [Intersection Observer API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API) or external libraries to lazy load images.\r\n\r\nThe lazy loading means that an image is only downloaded to the client when it's available in the browser's viewport.\r\n\r\nIn the latest version of Chromium-powered (including Chrome, Edge and Opera) and Firefox browsers support it natively with the `loading=\"lazy\"` attribute:\r\n\r\n```html\r\n<img src=\"...\" alt=\"...\" loading=\"lazy\" />\r\n```\r\n\r\nThe browser now will defer the loading of images until they are visible in the viewport.\r\n\r\nIt's common to see that the layout is shifted when an image is loaded completely. To avoid the issue, it's recommended to set the size of image using either inline styles or the attributes:\r\n\r\n```html\r\n<img loading=\"lazy\" style=\"height: 200px; width: 300px;\" />\r\n\r\n<!-- Or -->\r\n<img loading=\"lazy\" height=\"200\" width=\"300\" />\r\n```\r\n","slug":"lazy-loading-images-with-the-loading-attribute","title":"Lazy loading images with the loading attribute","topics":"HTML"},{"category":"Tip","content":"\r\nIf you're working on multiple projects or multiple features in the same project, you probably have different branches locally.\r\n\r\nSometimes, it's not easy for us to remember exactly the branch that we worked on most recently.\r\nThe `branch` command lists all branches sorted by alphabetical order:\r\n\r\n```shell\r\n$ git branch\r\n\r\n  avoid-mixing-styles\r\n  fold-css\r\n* quick-color-variables\r\n  skip-questions\r\n  sort-branches\r\n```\r\n\r\nThe `*` symbol indicates the current branch. The list might be longer if you don't often remove the merged branches which are usually not relevant anymore.\r\n\r\nFortunately, Git provides the `sort` parameter allowing us to list branches which are sorted by the commit date:\r\n\r\n```shell\r\n$ git branch --sort=-committerdate\r\n\r\n* sort-branches\r\n  fold-css\r\n  quick-color-variables\r\n  skip-questions\r\n  avoid-mixing-styles\r\n```\r\n\r\nYou can reverse the sorting direction by omitting`-`:\r\n\r\n```shell\r\n$ git branch --sort=committerdate\r\n\r\n  avoid-mixing-styles\r\n  skip-questions\r\n  quick-color-variables\r\n  fold-css\r\n* sort-branches\r\n```\r\n\r\nIt's good to know that we can make this behaviour as the default when listing branches:\r\n\r\n```shell\r\n$ git config --global branch.sort -committerdate\r\n```\r\n","slug":"list-branches-sorted-by-most-recent-commit-date","title":"List branches sorted by most recent commit date","topics":"Git"},{"category":"Tip","content":"\r\nBy default, [Google font](https://fonts.google.com) loads the completed font that contains the full set of characters it supports.\r\n\r\nThere are associations that we only use a Google font for a logo or heading which has specific letters. Instead of downloading the entire font, we can ask Google for downloading a part of it that contains required characters.\r\n\r\nWe can pass the characters to the `text` parameter:\r\n\r\n```html\r\n<link href=\"https://fonts.googleapis.com/css2?family=Sacramento&text=MyHeading\" rel=\"stylesheet\" type=\"text/css\" />\r\n```\r\n\r\nIf you want to have Unicode characters, then encode them with their UTF-8 representations. For example `tips & tricks` are represented as `tips+%26+tricks`.\r\n\r\nReducing the size of the font file improves the loading time, especially on devices where the network speed is usually limited.\r\n\r\n### See also\r\n\r\n-   [Avoid invisible text when loading a font](/avoid-invisible-text-when-loading-a-font.html)\r\n-   [Combine Google font requests](/combine-google-font-requests.html)\r\n","slug":"load-given-characters-in-a-google-font-request","title":"Load given characters in a Google font request","topics":"CSS, Google Font"},{"category":"Tip","content":"\r\nWe can use the arrow keys to navigate between elements under the _Elements_ tab. However, it's not convenient for us to find a given element when the page has a lot of nested elements.\r\n\r\nYou probably see the problem when you're working on a unit of page (a component or widget, for example), and don't have the full knowledge of the entire page. In that situation, you might don't know exactly where your element is.\r\n\r\nFortunately, DevTools gives us the `inspect` function to locate an element if we know its selector. The following code finds an element that has the `.rpv-default-layout-main` class and reveals it under the _Elements_ tab if there's any.\r\n\r\n```js\r\ninspect($('.rpv-default-layout-main'));\r\n```\r\n\r\n> The `$` function is equivalent to the [`document.querySelector`](/quick-query-elements-in-the-console.html) function\r\n\r\n<video loop muted controls>\r\n    <source src=\"/img/inspect-function.mp4\" type=\"video/mp4\">\r\n</video>\r\n\r\n### See also\r\n\r\n-   [Quick query elements in the Console](/quick-query-elements-in-the-console.html)\r\n","slug":"locate-an-element-with-a-given-selector","title":"Locate an element with a given selector","topics":"DevTools"},{"category":"Tip","content":"\r\nThere are a few ways to log a value to the _Console_, but using object destructuring is the convenient and short one.\r\n\r\n```js\r\nconst fullName = 'John Doe';\r\n\r\nconsole.log('full name' + fullName);\r\nconsole.log('full name', fullName);\r\n\r\n// Better: use template string\r\nconsole.log(`full name: ${fullName}`);\r\n\r\n// Best: use object destructuring\r\nconsole.log({ fullName }); // { fullName: 'John Doe' }\r\n```\r\n\r\n### See also\r\n\r\n-   [Conditional logging in the Console](/conditional-logging-in-the-console.html)\r\n-   [Log a variable in an arrow function](/log-a-variable-in-an-arrow-function.html)\r\n-   [Log a variable to the console using conditional breakpoints](/log-a-variable-to-the-console-using-conditional-breakpoints.html)\r\n-   [Log an array to the Console](/log-an-array-to-the-console.html)\r\n","slug":"log-a-value-to-the-console","title":"Log a value to the Console","topics":"JavaScript"},{"category":"Trick","content":"\r\nHave you ever had to debug an 1 line arrow function using `console.log`? It usually requires us to switch to a multiple lines version such as:\r\n\r\n```js\r\nconst formatYmd = (date) => {\r\n    console.log(date.toISOString());\r\n    return date.toISOString().slice(0, 10);\r\n};\r\n```\r\n\r\nYou can get rid of that conversion by using the `||` operator. It works because `console.log()` returns `undefined`, so the `||` will enforce the function to evaluate and return the right side which is our actual function.\r\n\r\n```js\r\nconst formatYmd = (date) => console.log(date.toISOString()) || date.toISOString().slice(0, 10);\r\n\r\nformatYmd(new Date());\r\n// Print something like `2021-02-25T04:52:39.720Z` in the Console\r\n```\r\n\r\nThere is another, less known tip which uses the [comma operator](/shorten-codes-with-the-comma-operator.html):\r\n\r\n```js\r\nconst formatYmd = date => (console.log(...), date.toISOString().slice(0, 10));\r\n```\r\n\r\n> You will find more useful 1 line-of-code functions on [1 LOC](https://1loc.dev)\r\n\r\n### See also\r\n\r\n-   [Conditional logging in the Console](/conditional-logging-in-the-console.html)\r\n-   [Log a value to the Console](/log-a-value-to-the-console.html)\r\n-   [Log a variable to the console using conditional breakpoints](/log-a-variable-to-the-console-using-conditional-breakpoints.html)\r\n-   [Log an array to the Console](/log-an-array-to-the-console.html)\r\n","slug":"log-a-variable-in-an-arrow-function","title":"Log a variable in an arrow function","topics":"JavaScript"},{"category":"Trick","content":"\r\nSometimes it's not possible for us to log data to the _Console_ directly in the code. For example, when we debug codes coming from external libraries.\r\n\r\nPerform the steps below to print the variable:\r\n\r\n-   Open the Chrome DevTools, and activate the _Sources_ tab\r\n-   Navigate to the line of a given function that you want to log the data\r\n-   Right-click the line number, and choose _Add conditional breakpoint ..._ from the context menu\r\n-   Enter the condition\r\n\r\n```js\r\nconsole.log('replace-it-with-your-variable');\r\n```\r\n\r\nWhen the associcate line is hit by the debug process, it will try to evaluate the condition meaning that the variable is printed out.\r\n\r\nThe nice thing is that the script execution on the page is still being processed because the condition never happens (the `console.log` function returns `undefined`).\r\n\r\nIn the following screenshot, the `params` variable is logged to the _Console_ when the `sum` function is invoked.\r\n\r\n![Log with conditional breakpoints](/img/log-conditional-breakpoints.png)\r\n\r\n### See also\r\n\r\n-   [Conditional logging in the Console](/conditional-logging-in-the-console.html)\r\n-   [Log a value to the Console](/log-a-value-to-the-console.html)\r\n-   [Log a variable in an arrow function](/log-a-variable-in-an-arrow-function.html)\r\n-   [Log an array to the Console](/log-an-array-to-the-console.html)\r\n","slug":"log-a-variable-to-the-console-using-conditional-breakpoints","title":"Log a variable to the console using conditional breakpoints","topics":"DevTools"},{"category":"Tip","content":"\r\nInstead of using the `console.log` function, `console.table` produces a better output. It works pretty well with an array or object.\r\n\r\n```js\r\nconst resources = [\r\n    {\r\n        name: '1 LOC',\r\n        description: 'Favorite JavaScript utilities in single line of code',\r\n        link: 'https://1loc.dev',\r\n    },\r\n    {\r\n        name: 'CSS Layout',\r\n        description: 'A collection of popular layouts and patterns made with CSS',\r\n        link: 'https://csslayout.io',\r\n    },\r\n    {\r\n        name: 'HTML DOM',\r\n        description: 'How to manage HTML DOM with vanilla JavaScript',\r\n        link: 'https://htmldom.dev',\r\n    },\r\n    {\r\n        name: 'Responsive Design Patterns',\r\n        description: 'A collection of patterns to create a responsive web page',\r\n        link: 'https://responsive.page',\r\n    },\r\n    {\r\n        name: 'Front-end Tips',\r\n        description: 'Super tiny, quick tips, tricks and best practices of front-end development',\r\n        link: 'https://getfrontend.tips',\r\n    },\r\n    {\r\n        name: 'this VS that',\r\n        description: 'The differences between ___ and ___ in the front-end development',\r\n        link: 'https://thisthat.dev',\r\n    },\r\n];\r\n\r\nconsole.table(resources);\r\n```\r\n\r\nHere is the screenshot compares the output of two methods above:\r\n\r\n![console.table](/img/console-table.png)\r\n\r\nIf you don't want to see all the columns, then you can indicate the columns explicitly:\r\n\r\n```js\r\n// Show `name` and `link` properties\r\nconsole.table(resources, ['name', 'link']);\r\n```\r\n\r\n![console.table](/img/console-table-columns.png)\r\n\r\nThis tip also has effect when you want to [pick some particular properties from a JSON representation](/pick-given-properties-from-a-json-representation.html).\r\n\r\n### See also\r\n\r\n-   [Conditional logging in the Console](/conditional-logging-in-the-console.html)\r\n-   [Log a value to the Console](/log-a-value-to-the-console.html)\r\n-   [Log a variable in an arrow function](/log-a-variable-in-an-arrow-function.html)\r\n-   [Log a variable to the console using conditional breakpoints](/log-a-variable-to-the-console-using-conditional-breakpoints.html)\r\n","slug":"log-an-array-to-the-console","title":"Log an array to the Console","topics":"JavaScript"},{"category":"Tip","content":"\r\nUsing the `console.log` method in NodeJS might not be ideal if the input has deep nested properties. It will replace the deep nested property with `[Object]`.\r\n\r\nLet's say that the `person` variable holds the information of a person. `console.log(person)` will produce the following output:\r\n\r\n```json\r\n{\r\n    username: 'johndoe',\r\n    meta: {\r\n        firstName: 'John',\r\n        lastName: 'Doe',\r\n        profile: { address: [Object] }\r\n    }\r\n}\r\n```\r\n\r\nTo get rid of `[Object]`, you can use the `console.dir` method to see the full object:\r\n\r\n```js\r\nconsole.dir(person, { depth: null });\r\n/*\r\n{\r\n    username: 'johndoe',\r\n    meta: {\r\n        firstName: 'John',\r\n        lastName: 'Doe',\r\n        profile: {\r\n            address: { street: '123 Main St', city: 'AnyTown' }\r\n        }\r\n    }\r\n}\r\n*/\r\n```\r\n\r\nIt's also possible to use the same technique mentioned in the [_Pretty format JSON_](/pretty-format-json.html) tip which works in both NodeJS and browser environments.\r\n\r\n### See also\r\n\r\n-   [Transform values from a JSON representation](/transform-values-from-a-json-representation.html)\r\n","slug":"log-the-full-object-in-nodejs","title":"Log the full object in NodeJS","topics":"NodeJS"},{"category":"Tip","content":"\r\nSetting the width for each cell explicitly is the straightforward way to give all columns the same width.\r\nFor example, the CSS declaration below splits a table of four columns into parts whose widths are the same:\r\n\r\n```css\r\ntable td {\r\n    width: 25%;\r\n}\r\n```\r\n\r\nHowever, the approach doesn't work if the table has a dynamic number of columns. Fortunately, we can use the `table-layout` property to do that.\r\nNo matter what how many columns the table has, they will have the same widths.\r\n\r\n```css\r\ntable {\r\n    table-layout: fixed;\r\n}\r\n```\r\n","slug":"make-a-table-with-equal-column-widths","title":"Make a table with equal column widths","topics":"CSS"},{"category":"Tip","content":"\r\nSometimes a function has to deal with different conditions. It's not ideal to pass all of them as separated parameters.\r\n\r\nTo demonstrate the problem, let's say that we need to validate a password in a registration form. It's up to you to define differents rules for a strong password, but this example covers rules listed as following:\r\n\r\n-   Should have at least 8 characters\r\n-   Should contain at least one upper case character\r\n-   Should contain at least one lower case character\r\n-   Should contain at least one digit\r\n\r\nAs we imagine, each rule could be represented by a `boolean` parameter. The validator function looks like:\r\n\r\n```js\r\nconst validatePassword = (password, checkLength, checkUpperCase, checkLowerCase, checkDigit) => {\r\n    // returns `true` or `false`\r\n    // ...\r\n};\r\n```\r\n\r\nThe number of parameters can be increased quickly depending on the number of rules. Also, the implementation is a mess if we combine the rules together.\r\nTo fix the problem, we introduce the rule flag by different numbers. Each number is a power of 2:\r\n\r\n```js\r\nconst RULE_LENGTH = 1 << 0; // 1\r\nconst RULE_UPPER_CASE = 1 << 1; // 2\r\nconst RULE_LOWER_CASE = 1 << 2; // 4\r\nconst RULE_DIGIT = 1 << 3; // 8\r\n```\r\n\r\nWe can create a combination of rules via the bitwise (`|`) operator. Using `|` with different rule(s) will generate an unique number, because a number can be written as the sum of different power of 2.\r\n\r\n| Combination                                                       | Number |\r\n| ----------------------------------------------------------------- | ------ |\r\n| `RULE_LENGTH`                                                     | 1      |\r\n| `RULE_UPPER_CASE`                                                 | 2      |\r\n| `RULE_LENGTH \\| RULE_UPPER_CASE`                                  | 3      |\r\n| `RULE_LOWER_CASE`                                                 | 4      |\r\n| `RULE_LENGTH \\| RULE_LOWER_CASE`                                  | 5      |\r\n| `RULE_UPPER_CASE \\| RULE_LOWER_CASE`                              | 6      |\r\n| `RULE_LENGTH \\| RULE_UPPER_CASE \\| RULE_LOWER_CASE`               | 7      |\r\n| ...                                                               | ...    |\r\n| `RULE_LENGTH \\| RULE_UPPER_CASE \\| RULE_LOWER_CASE \\| RULE_DIGIT` | 15     |\r\n\r\nThe validator function can be shortent as following, where `rule` is a number:\r\n\r\n```js\r\n// The default rule should cover all the cases\r\nconst RULE_DEFAULT = RULE_LENGTH | RULE_UPPER_CASE | RULE_LOWER_CASE | RULE_DIGIT; // 15\r\n\r\nconst validatePassword = (password, rule = RULE_DEFAULT) => {};\r\n```\r\n\r\nYou just need to pass the required rules instead of indicating all of them:\r\n\r\n```js\r\n// Only check the length rule\r\nvalidatePassword(password, RULE_LENGTH);\r\n\r\n// Check length and upper case rules\r\nvalidatePassword(password, RULE_LENGTH | RULE_UPPER_CASE);\r\n```\r\n\r\nFrom the `rule` number, we can know whether a given rule is enabled by using the `&` operator:\r\n\r\n```js\r\nconst validatePassword = (password, rule = RULE_DEFAULT) => {\r\n    // `RULE_LENGTH` is enabled\r\n    if (rule & RULE_LENGTH && password.length < 8) {\r\n        return false;\r\n    }\r\n\r\n    if (rule & RULE_UPPER_CASE && password === value.toUpperCase()) {\r\n        return false;\r\n    }\r\n\r\n    if (rule & RULE_LOWER_CASE && password === value.toLowerCase()) {\r\n        return false;\r\n    }\r\n\r\n    if (rule & RULE_DIGIT && password.search(/[0-9]/) < 0) {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n};\r\n```\r\n\r\n### See also\r\n\r\n-   [Avoid boolean parameters](/avoid-boolean-parameters.html)\r\n","slug":"manage-multiple-boolean-flags","title":"Manage multiple boolean flags","topics":"JavaScript"},{"category":"Tip","content":"\r\nWe can use the ES6 spread operator to merge different arrays into one:\r\n\r\n```js\r\nconst a = [1, 2, 3];\r\nconst b = [4, 5, 6];\r\nconst c = [7, 8, 9];\r\n\r\nconst final = [...a, ...b, ...c]; // [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n```\r\n\r\nThe spread operator is handy if we use the `push` method as well:\r\n\r\n```js\r\nconst a = [1, 2, 3];\r\nconst b = [4, 5, 6];\r\n\r\na.push(...b);\r\na; // [1, 2, 3, 4, 5, 6]\r\n```\r\n","slug":"merge-different-arrays","title":"Merge different arrays","topics":"JavaScript"},{"category":"Tip","content":"\r\nWe often use the arrow keys to move the cursor when editing the parameters of a command.\r\n\r\nImagine that the target position is somewhere in the middle of the command. Pressing the arrow keys multiple times takes time, and isn't a comfortable process.\r\n\r\nFortunately, there is a shortcut that makes the flow easier. We just simply hold the <kbd>alt</kbd> key, and click the mouse at the destination position.\r\n\r\nThe following video demonstrates how I fix a typo in a command using this tip.\r\n\r\n<video loop muted controls>\r\n    <source src=\"/img/move-cursor-terminal.mp4\" type=\"video/mp4\">\r\n</video>\r\n","slug":"move-the-cursor-to-any-position-in-a-macos-command","title":"Move the cursor to any position in a macOS command","topics":"Command Line, macOS"},{"category":"Tip","content":"\r\nOn macOS, we can press the combination of <kbd>cmd</kbd> + <kbd>shift</kbd> + <kbd>4</kbd> keys to start capturing a screenshot.\r\n\r\nEven though we can move the mouse to resize the captured area, the top left corner is fixed. Sometime it's not convenient if we want to adjust the top left corner.\r\n\r\nIn that case, rather than pressing the <kbd>escape</kbd> key and try again, you can hit and hold the <kbd>space</kbd> key. Moving your mouse will also move the screenshot area.\r\n\r\n<video loop muted controls>\r\n    <source src=\"/img/move-screenshot-area.mp4\" type=\"video/mp4\">\r\n</video>\r\n\r\n### See also\r\n\r\n-   [Capture a screenshot without shadow on macOS](/capture-a-screenshot-without-shadow-on-macos.html)\r\n-   [Copy screenshots to the clipboard on macOS](/copy-screenshots-to-the-clipboard-on-macos.html)\r\n","slug":"move-the-screenshot-area-on-macos","title":"Move the screenshot area on macOS","topics":"macOS"},{"category":"Tip","content":"\r\nIt's a common approach to use the [DOM APIs](https://htmldom.dev) to find all headings on the page, and number each of them. This post introduces another way to do that with CSS only.\r\n\r\nIf you follow some search engine optimization (known as _SEO_) practices, you are adviced to use only one `h1` tag on the page. The single `h1` tag is used to display the main title. Hence, we will ignore the `h1` tag when numbering the headings.\r\n\r\nGiven the following markup:\r\n\r\n```html\r\n<h2>Chapter 1</h2>\r\n\r\n<h3>Section 1</h3>\r\n<h4>Sub section A</h4>\r\n\r\n<h3>Section 2</h3>\r\n<h4>Sub section A</h4>\r\n<h4>Sub section B</h4>\r\n\r\n<h2>Chapter 2</h2>\r\n```\r\n\r\nIt should produce the content as below:\r\n\r\n```html\r\n1. Chapter 1 1.1. Section 1 1.1.1. Sub section A 1.2. Section 2 1.2.1. Sub section A 1.2.2. Sub section B 2. Chapter 2\r\n```\r\n\r\nWe can archive it by using the CSS counter.\r\n\r\nGoing down from the `body` element, we will reset the counter for the first `h2`. The numbers are inserted before the content via the `::before` pseudo element:\r\n\r\n```css\r\nbody,\r\nh1 {\r\n    counter-reset: h2;\r\n}\r\nh2::before {\r\n    counter-increment: h2;\r\n    content: counter(h2) '. ';\r\n}\r\n```\r\n\r\nThe `counter-increment` property indicates that when we see the next `h2` tag, the number will be increased by one.\r\n\r\nWe continue using the same technique for `h3` tags. The number for a `h3` heading must be prefixed with the number of its parent `h2` tag:\r\n\r\n```css\r\nh2 {\r\n    counter-reset: h3;\r\n}\r\nh3::before {\r\n    counter-increment: h3;\r\n    content: counter(h2) '.' counter(h3) '. ';\r\n}\r\n```\r\n\r\nHere we use the `.` character to separate the numbers. If you want to number deeper headings such as `h4`, `h5`, then the CSS should look like as following:\r\n\r\n```css\r\nh3 {\r\n    counter-reset: h4;\r\n}\r\nh4 {\r\n    counter-reset: h5;\r\n}\r\nh4::before {\r\n    counter-increment: h4;\r\n    content: counter(h2) '.' counter(h3) '.' counter(h4) '. ';\r\n}\r\nh5::before {\r\n    counter-increment: h5;\r\n    content: counter(h2) '.' counter(h3) '.' counter(h4) '.' counter(h5) '. ';\r\n}\r\n```\r\n\r\n### See also\r\n\r\n-   [Style index numbers of list items](/style-index-numbers-of-list-items.html)\r\n","slug":"number-headings-and-subheadings-automatically","title":"Number headings and subheadings automatically","topics":"CSS"},{"category":"Tip","content":"\r\n[Svelte](https://svelte.dev) is one of the libraries for building user interfaces. We usually declare the properties and values of a component in the same syntax of declaring a HTML tag.\r\n\r\nThe following component has three different properties. Two of them represent the first and last name of an account, and the last one updates these values.\r\n\r\n```html\r\n<script>\r\n    let firstName = 'John';\r\n    let lastName = 'Doe';\r\n\r\n    const onSetFullName = (props) => {\r\n        firstName = props.firstName;\r\n        lastName = props.lastName;\r\n    };\r\n</script>\r\n\r\n<Account firstName=\"{firstName}\" lastName=\"{lastName}\" onSetFullName=\"{onSetFullName}\" />\r\n```\r\n\r\nThe cool thing is that, if you use the same name for both property and the variable representing its value, you can omit the property. The `Account` component can be shorten as following:\r\n\r\n```js\r\n<Account\r\n    {firstName}\r\n    {lastName}\r\n    {onSetFullName}\r\n/>\r\n```\r\n\r\n### See also\r\n\r\n-   [Omit values of HTML boolean attributes](/omit-values-of-html-boolean-attributes)\r\n","slug":"omit-properties-of-a-svelte-component","title":"Omit properties of a Svelte component","topics":"Svelte"},{"category":"Best practice","content":"\r\nThere are some HTML boolean attributes such as `checked`, `disabled`, `readonly`, `required`, `selected`, etc.\r\n\r\nAccording to the [HTML specification](https://html.spec.whatwg.org/#boolean-attribute), a boolean attribute has three possible declarations. All of them have the same effect:\r\n\r\n```html\r\n<input readonly />\r\n<input readonly=\"\" />\r\n<input readonly=\"readonly\" />\r\n```\r\n\r\n`true` and `false` are invalid values:\r\n\r\n```html\r\n<!-- Not allowed -->\r\n<button disabled=\"true\">...</button>\r\n<button disabled=\"false\">...</button>\r\n```\r\n\r\nThe only way to represent a `false` value is to remove the attribute. Hence, to avoid the incorrect and misleading usages, it's recommended to remove the value:\r\n\r\n```html\r\n<input readonly />\r\n```\r\n\r\n### See also\r\n\r\n-   [Omit properties of a Svelte component](/omit-properties-of-a-svelte-component)\r\n","slug":"omit-values-of-html-boolean-attributes","title":"Omit values of HTML boolean attributes","topics":"HTML"},{"category":"Tip","content":"\r\nWhen looking for the documentation of a npm package, we often use Google to search for its homepage and npm page.\r\n\r\nIt turns out that we can go to the homepage quickly by running the following command:\r\n\r\n```shell\r\n$ npm home PACKAGE_NAME\r\n```\r\n\r\nOpening its repository is easy too:\r\n\r\n```shell\r\n$ npm repo PACKAGE_NAME\r\n```\r\n\r\nBoth commands open the destination website in your default browser.\r\n","slug":"open-a-package-s-homepage-or-repo","title":"Open a package's homepage or repo","topics":"NPM"},{"category":"Trick","content":"\r\nWe all know that setting the `target=\"_blank\"` attribute to an individual link will open it in a new tab.\r\n\r\nIt's uncommon to see a real use case where you want all links on the page to be opened in a new tab. A site that only collects links of external resources might be an example.\r\n\r\nIn that case, rather than adding the attribute to all links, you just set it to the `base` tag:\r\n\r\n```html\r\n<head>\r\n    <base target=\"_blank\" />\r\n    ...\r\n</head>\r\n```\r\n","slug":"open-all-links-in-new-tabs","title":"Open all links in new tabs","topics":"HTML"},{"category":"Trick","content":"\r\n`instanceof` doesn't work for primitive types.\r\n\r\nIf you want to use `instanceof` all the time, then you can override the behavior of `instanceof` by implementing a static method with the key of `Symbol.hasInstance`.\r\nIn the following code, we create a class called `PrimitiveNumber` that checks if a value is a number:\r\n\r\n```js\r\nclass PrimitiveNumber {\r\n    static [Symbol.hasInstance](value) {\r\n        return typeof value === 'number';\r\n    }\r\n}\r\n\r\n12345 instanceof PrimitiveNumber; // true\r\n'helloworld' instanceof PrimitiveNumber; // false\r\n```\r\n","slug":"override-the-behavior-of-instanceof","title":"Override the behavior of instanceof","topics":"JavaScript"},{"category":"Tip","content":"\r\nJavaScript has some built-in functions that accept a list of individuals arguments, but passing an array doen't work. `Math.max`, `Math.min` are some of them.\r\n\r\nThey are used to find the [biggest](https://1loc.dev/#find-the-maximum-item-of-an-array) and [smallest numbers](https://1loc.dev/#find-the-minimum-item-of-an-array) in the passed arguments, repectively.\r\n\r\n```js\r\nMath.max(1, 2, 3, 4); // 4\r\n\r\n// Doesn't work because it treats the array as a single parameter\r\n// That parameter isn't a number, so the function returns `NaN`\r\nMath.max([1, 2, 3, 4]); // NaN\r\n```\r\n\r\nIf we want to pass a dynamic array of numbers, then the ES6 spread operator (`...`) can help. It turns a varible to a list of individual parameters:\r\n\r\n```js\r\nconst array = [1, 2, 3, 4];\r\nMath.max(...array); // 4\r\n```\r\n\r\nJavaScript engines implemented by different browsers have the limited number of parameters. Using the `...` operator doesn't work if you have a big array. Using the `reduce` method doesn't have this problem.\r\n\r\n```js\r\nconst max = (arr) => arr.reduce((a, b) => Math.max(a, b));\r\nmax([1, 2, 3, 4]); // 4\r\n```\r\n\r\n### See also\r\n\r\n-   [Accept any numbers of parameters](/accept-any-numbers-of-parameters.html)\r\n","slug":"pass-an-array-as-function-arguments","title":"Pass an array as function arguments","topics":"JavaScript"},{"category":"Tip","content":"\r\nImagine a situation where you print something in the _Console_ when clicking or following a link. When you navigate to another page, the _Console_ is cleared and all the messages are lost.\r\n\r\nFortunately, both Chrome DevTools and Firefox Developer Tools give us options to persist the logs between page loads.\r\n\r\nUnder the _Console_ panel of Chrome DevTools, click the cog icon on the right, and turn on the _Preserve log_ option:\r\n\r\n![Preserve log in Chrome DevTools](/img/preserve-log.png)\r\n\r\nIn addition to the logs of each page, DevTools also lets you know when you navigate to another page. It's easy for us to determine where a log message comes from.\r\n","slug":"persist-console-logs-between-page-refreshes","title":"Persist Console logs between page refreshes","topics":"DevTools"},{"category":"Tip","content":"\r\nBy default, `JSON.stringify(value)` will pull all serializable properties of `value`.\r\n\r\n```js\r\nconst resources = [\r\n    {\r\n        name: '1 LOC',\r\n        description: 'Favorite JavaScript utilities in single line of code',\r\n        link: 'https://1loc.dev',\r\n    },\r\n    {\r\n        name: 'CSS Layout',\r\n        description: 'A collection of popular layouts and patterns made with CSS',\r\n        link: 'https://csslayout.io',\r\n    },\r\n    {\r\n        name: 'HTML DOM',\r\n        description: 'How to manage HTML DOM with vanilla JavaScript',\r\n        link: 'https://htmldom.dev',\r\n    },\r\n    {\r\n        name: 'Responsive Design Patterns',\r\n        description: 'A collection of patterns to create a responsive web page',\r\n        link: 'https://responsive.page',\r\n    },\r\n    {\r\n        name: 'Front-end Tips',\r\n        description: 'Super tiny, quick tips, tricks and best practices of front-end development',\r\n        link: 'https://getfrontend.tips',\r\n    },\r\n    {\r\n        name: 'this VS that',\r\n        description: 'The differences between ___ and ___ in the front-end development',\r\n        link: 'https://thisthat.dev',\r\n    },\r\n];\r\n\r\nJSON.stringify(resources);\r\n/*\r\n[\r\n\t{\r\n\t\t\"name\": \"1 LOC\",\r\n\t\t\"description\": \"...\",\r\n\t\t\"link\": \"...\"\r\n\t},\r\n\t{\r\n\t\t\"name\": \"CSS Layout\",\r\n\t\t\"description\": \"...\",\r\n\t\t\"link\": \"...\"\r\n\t},\r\n\t{\r\n\t\t\"name\": \"HTML DOM\",\r\n\t\t\"description\": \"...\",\r\n\t\t\"link\": \"...\"\r\n\t},\r\n    ...\r\n]\r\n*/\r\n```\r\n\r\nIf you want to receive some particular properties, then pass them to the second parameter:\r\n\r\n```js\r\n// Only pick the `name` property\r\nJSON.stringify(resources, ['name']);\r\n\r\n// Pick the `name` and `link` properties\r\nJSON.stringify(resources, ['name', 'link']);\r\n```\r\n\r\nYou can use the same tip when [logging an array to the Console](/log-an-array-to-the-console.html).\r\n\r\n### See also\r\n\r\n-   [Log the full object in NodeJS](/log-the-full-object-in-nodejs.html)\r\n-   [Pretty format JSON](/pretty-format-json.html)\r\n-   [Transform values from a JSON representation](/transform-values-from-a-json-representation.html)\r\n","slug":"pick-given-properties-from-a-json-representation","title":"Pick given properties from a JSON representation","topics":"JavaScript"},{"category":"Tip","content":"\r\nIf you want to receive the first and last items of a given array, you might think of the common way as following:\r\n\r\n```js\r\nconst length = arr.length;\r\nconst first = arr[0];\r\nconst last = arr[arr.length - 1];\r\n```\r\n\r\nBecause an array is also an object, the `length` property can be accessed with the destructuring syntax:\r\n\r\n```js\r\nconst { length } = arr;\r\n```\r\n\r\nAlso, an array item at any position can be accessed with its index. Hence, we can shorten three lines at the top with a single line:\r\n\r\n```js\r\nconst { length, 0: first, [length - 1]: last } = arr;\r\n```\r\n\r\n### See also\r\n\r\n-   [Get characters of a string](/get-characters-of-a-string.html)\r\n-   [Ignore items from array destructuring](/ignore-items-from-array-destructuring.html)\r\n","slug":"pick-the-first-and-last-items-of-an-array","title":"Pick the first and last items of an array","topics":"JavaScript"},{"category":"Best practice","content":"\r\nHave you ever seen a class name starting with `js-`?\r\n\r\nIf the answer is not, then you can visit the [GitHub repository](https://github.com/phuoc-ng/frontend-tips) and see the source of generated HTML. There are bunch of elements whose class are prefixed with `js-` such as:\r\n\r\n```html\r\n<meta class=\"js-ga-set\" name=\"userId\" content=\"...\" /> <meta class=\"js-ga-set\" name=\"dimension1\" content=\"...\" />\r\n```\r\n\r\nThey are often used to manage the list of elements that we don't want to set id for (dynamic elements, for example). In these cases, we use the `document.querySelectorAll('js-xxx')` method to retrieve the elements list.\r\n\r\nIn the other words, the `js-` classes don't define the styles, but for managing the elements in JavaScript instead. That's why they are prefixed with `js-`.\r\n\r\nFollow this naming convention is helpful if you're working in a team. Other engineers will be aware of the class name, and don't remove them when refactoring the page.\r\n","slug":"prefix-class-name-with-js-to-manipulate-with-javascript","title":"Prefix class name with js to manipulate with javascript","topics":"DOM, HTML"},{"category":"Tip","content":"\r\nWe often use `JSON.stringify` to generate JSON for a given object. By default, it removes all spaces between items. It's not easy to scan the output, especially when using with `console.log`.\r\n\r\nDo you know that it's possible for us to generate a pretty output by passing the indentation level to the third parameter?\r\n\r\n```js\r\nconst person = {\r\n    firstName: 'John',\r\n    lastName: 'Doe',\r\n    ages: 42,\r\n};\r\n\r\nJSON.stringify(person, null, 2);\r\n\r\n/*\r\n\"{\r\n  \"firstName\": \"John\",\r\n  \"lastName\": \"Doe\",\r\n  \"ages\": 42\r\n}\"\r\n*/\r\n```\r\n\r\nIf you prefer tab for the indentations, then passing the `\\t` character:\r\n\r\n```js\r\nJSON.stringify(person, null, '\\t');\r\n\r\n/*\r\n\"{\r\n\t\"firstName\": \"John\",\r\n\t\"lastName\": \"Doe\",\r\n\t\"ages\": 42\r\n}\"\r\n*/\r\n```\r\n\r\n### See also\r\n\r\n-   [Log the full object in NodeJS](/log-the-full-object-in-nodejs.html)\r\n-   [Pick given properties from a JSON representation](/pick-given-properties-from-a-json-representation.html)\r\n-   [Transform values from a JSON representation](/transform-values-from-a-json-representation.html)\r\n","slug":"pretty-format-json","title":"Pretty format JSON","topics":"JavaScript"},{"category":"Tip","content":"\r\nBy default, JavaScript will escape the next characters whenever it sees an escape character.\r\nFor example, the backslash (`\\`) is one of escape character, the actual value of following path isn't the same as it is represented.\r\n\r\n```js\r\n'C:\\\\Foo\\Bar\\Fuzz\\document.pdf'; // C:\\FooBarFuzzdocument.pdf\r\n```\r\n\r\nIf you want to keep a string from being escaped, then use the [String.raw](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw) function:\r\n\r\n```js\r\nString.raw`C:\\\\Foo\\Bar\\Fuzz\\document.pdf`; // C:\\\\Foo\\Bar\\Fuzz\\document.pdf\r\n```\r\n\r\n-   [Create a multiline strings](/create-a-multiline-strings.html)\r\n-   [Get rid of escaping quotes with template literal](/get-rid-of-escaping-quotes-with-template-literal.html)\r\n-   [Use template literal to concatenate strings](/use-template-literal-to-concatenate-strings.html)\r\n","slug":"prevent-a-string-from-being-escaped","title":"Prevent a string from being escaped","topics":"JavaScript"},{"category":"Tip","content":"\r\n[Sticky headers](https://csslayout.io/patterns/sticky-header) is a common layout that can be seen in a lot of websites. The problem is that it doesn't play nicely with anchor links.\r\n\r\nImagine that we have a table of contents that contains different anchor links. Each anchor brings the user to a particular section in the page.\r\n\r\nWhen users click an anchor, the page scrolls to the destination section. But some parts of the section are displayed under the header which is not a good experience for users.\r\n\r\nTo prevent it from happening, we would like to add a margin to the top of the destination, but it only has effect when scrolling. It's the time where the scroll-margin-top comes in handy.\r\n\r\n```css\r\nheader {\r\n    height: 2rem;\r\n}\r\n\r\nsection {\r\n    scroll-margin-top: 2rem;\r\n}\r\n```\r\n\r\n### See also\r\n\r\n-   [Smooth scrolling with pure CSS](/smooth-scrolling-with-pure-css.html)\r\n","slug":"prevent-anchor-links-from-disappearing-behind-a-sticky-header","title":"Prevent anchor links from disappearing behind a sticky header","topics":"CSS"},{"category":"Tip","content":"\r\nIf the contents of a website are written in a particular language, the visitors might be prompted to translate them into another language when using certain browsers ([Google Chrome](https://www.google.com/chrome), for example).\r\n\r\nYou can prevent this from happening by setting the `translate` attribute for the whole document:\r\n\r\n```html\r\n<html translate=\"no\"></html>\r\n```\r\n\r\nThe `translate` attribute has an effect on some translation tools such as [Google Translate](https://translate.google.com).\r\n\r\nMoreover, it's a global attribute meaning that we can use it for any elements. It's very useful if we don't want to translate a brand name even if the page is translated:\r\n\r\n```html\r\n<footer>(c) 2021 <span translate=\"no\">Brand Name</span></footer>\r\n```\r\n","slug":"prevent-browsers-from-asking-to-translate","title":"Prevent browsers from asking to translate","topics":"HTML"},{"category":"Tip","content":"\r\nBy default, macOS goes to sleep if it hasn't been used for a certain amount of time. However, there are cases we want to prevent it from happening such as during a presentation, downloading a big file.\r\n\r\nmacOS provides a command to do that:\r\n\r\n```shell\r\n$ caffeinate\r\n```\r\n\r\nPressing <kbd>ctrl</kbd> + <kbd>C</kbd> will bring it back to the normal mode.\r\n\r\nThe command also supports the time parameter. It indicates that macOS won't enter the sleep mode after a given number of seconds.\r\nFor example, the command below asks macOS to awake in the next 10 minutes.\r\n\r\n```shell\r\n$ caffeinate -u -t 600\r\n```\r\n","slug":"prevent-macos-from-going-to-sleep","title":"Prevent macOS from going to sleep","topics":"macOS"},{"category":"Best practice","content":"\r\nIf you're using jQuery to manage the events, then you're able to use `return false` within the event handler:\r\n\r\n```js\r\n$(element).on('click', function (e) {\r\n    return false;\r\n});\r\n```\r\n\r\nBefore returning the value of `false`, the handler would do something else. The problem is that if there's any runtime error occurring in the handler, we will not reach the `return false` statement at the end.\r\n\r\nIn that case, the default behavior will be taken:\r\n\r\n```js\r\n$(element).on('click', function (e) {\r\n    // Do something here, but if there's error at runtime\r\n    // ...\r\n    return false;\r\n});\r\n```\r\n\r\nWe can avoid this situation by using the `preventDefault` method before performing any custom handler:\r\n\r\n```js\r\n$(element).on('click', function (e) {\r\n    e.preventDefault();\r\n\r\n    // Do something here\r\n    // The default behavior is prevented regardless errors at runtime\r\n    // ...\r\n});\r\n```\r\n","slug":"prevent-the-default-behavior-with-jquery-event-handler","title":"Prevent the default behavior with jQuery event handler","topics":"DOM, JavaScript"},{"category":"Tip","content":"\r\nWe can create an expandable element with pure HTML tags as following:\r\n\r\n```html\r\n<details>\r\n    <summary>Title</summary>\r\n    <!--\r\n    The hidden content that will be shown when \r\n    clicking the `summary` tag.\r\n    -->\r\n</details>\r\n```\r\n\r\nI often use the tags when including a long error log on GitHub:\r\n\r\n```html\r\n<details>\r\n    <summary>Error log</summary>\r\n    <pre><code><!-- Full log here --></code></pre>\r\n</details>\r\n```\r\n\r\n### Demo\r\n\r\n:demo[]{title=\"Pure collapsible element\" url=\"/demo/pure-collapsible-element/index.html\"}\r\n","slug":"pure-collapsible-element","title":"Pure collapsible element","topics":"HTML"},{"category":"Trick","content":"\r\nUsually, we can invoke a function by using the form of Immediately Invoked Function Expression (IIFE).\r\n\r\n```js\r\n(function (a, b) {\r\n    return a + b;\r\n})(4, 2);\r\n\r\n// 6\r\n```\r\n\r\nDo you know that we get the same result if we omit the parentheses and put + at the beginning as follow:\r\n\r\n```js\r\n+(function (a, b) {\r\n    return a + b;\r\n})(4, 2);\r\n\r\n// 6\r\n```\r\n\r\nIt works because putting `+` at the beginning of function declaration will turn it to an expression, and passing the parameters with `()` at the end will invoke the expression.\r\nIt is rare to see that code in development, but it is used in the minifications to save the file size.\r\nIn addition to `+`, you can use other operators such as `-`, `!`, `~` and void in the similar way to invoke a function:\r\n\r\n```js\r\n-function() { ... }();\r\n!function() { ... }();\r\n~function() { ... }();\r\nvoid function() { ... }();\r\n```\r\n\r\nNote that the return value could be different from the original function, for example:\r\n\r\n```js\r\n!(function () {\r\n    return false;\r\n})(); // true\r\n```\r\n","slug":"put-special-operators-at-the-beginning-of-a-function","title":"Put special operators at the beginning of a function","topics":"JavaScript"},{"category":"Tip","content":"\r\nThe Chrome DevTools provides two shortcut methods to query the elements in the page.\r\n\r\n| Method | Indentical method           |\r\n| ------ | --------------------------- |\r\n| `$`    | `document.querySelector`    |\r\n| `$$`   | `document.querySelectorAll` |\r\n\r\nThe following screenshot demonstrates how to use them in the _Console_.\r\n\r\n![Query elements in the Console](/img/query-selector-shortcuts.png)\r\n\r\n### See also\r\n\r\n-   [Locate an element with a given selector](/locate-an-element-with-a-given-selector.html)\r\n","slug":"quick-query-elements-in-the-console","title":"Quick query elements in the Console","topics":"DevTools"},{"category":"Tip","content":"\r\nWe often declare variables for colors, mostly at the top of file, as following:\r\n\r\n```css\r\n:root {\r\n    --color-primary: #...;\r\n}\r\n```\r\n\r\nThe colors then can be reused with the `var` function:\r\n\r\n```css\r\n.btn--primary {\r\n    background-color: var(--color-primary);\r\n}\r\n```\r\n\r\nIf you're using Visual Studio Code, then you don't have to type `var(...)` completely. Instead, just type `--` and Visual Studio Code suggests the existing color variables.\r\n\r\n![Visual Studio Code completes color variables automatically](/img/vscode-autocomplete-colors.png)\r\n","slug":"quickly-type-color-variables","title":"Quickly type color variables","topics":"Visual Studio Code"},{"category":"Tip","content":"\r\nWe can use the ES6 spread operator to remove a property from an object:\r\n\r\n```js\r\nconst { name, ...rest } = { name: 'Foo', age: 20 };\r\n\r\nconsole.log(name); // 'Foo'\r\nconsole.log(rest); // { age: '20' }\r\n```\r\n\r\nIt's also possible to remove a dynamic property:\r\n\r\n```js\r\nconst property = 'name';\r\nconst { [property]: value, ...rest } = { name: 'Foo', age: 20 };\r\n\r\nconsole.log(value); // 'Foo'\r\nconsole.log(rest); // { age: '20' }\r\n```\r\n","slug":"remove-a-property-from-an-object","title":"Remove a property from an object","topics":"JavaScript"},{"category":"Tip","content":"\r\nWe often use the `:last-child` selector to unapply particular styles (such as `border`) for the last item.\r\nCreating a navigation that each item has a bottom border usually looks like:\r\n\r\n```css\r\nli {\r\n    border-bottom: 1px solid #e5e7eb;\r\n}\r\n\r\n/* Don't add border to the last item */\r\nli:last-child {\r\n    border-bottom: none;\r\n}\r\n```\r\n\r\nUsing the `:not` pseudo-class, we can make the code shorter and more easy to maintain with a single CSS declaration:\r\n\r\n```css\r\n/* Add the border to all items except the last one */\r\nli:not(:last-child) {\r\n    border-bottom: 1px solid #e5e7eb;\r\n}\r\n```\r\n\r\nAnother approach is to use the `+` selector:\r\n\r\n```css\r\nli + li {\r\n    border-top: 1px solid #e5e7eb;\r\n}\r\n```\r\n\r\n### Demo\r\n\r\n:demo[]{title=\"Remove the border from the last navigation item\" url=\"/demo/remove-the-border-from-the-last-navigation-item/index.html\"}\r\n","slug":"remove-the-border-from-the-last-navigation-item","title":"Remove the border from the last navigation item","topics":"CSS"},{"category":"Best practice","content":"\r\nAssume that we are going to determine the [weekday](https://1loc.dev/#get-the-weekday-of-a-date) of a date. Given a `date` object, we can get the day of the week:\r\n\r\n```js\r\nconst day = date.getDay();\r\n```\r\n\r\nThe day is zero-based index, and starts with Sunday. It's easy to write a few `if` statements such as:\r\n\r\n```js\r\nlet weekDay = '';\r\nif (day === 0) {\r\n    weekDay = 'Sunday';\r\n} else if (day === 1) {\r\n    weekDay = 'Monday';\r\n} else if (day === 2) {\r\n    // More if statements are omitted\r\n    // ...\r\n} else if (day === 6) {\r\n    weekDay = 'Saturday';\r\n}\r\n```\r\n\r\nSince all the `if` statements above have the same left-hand side expression, we can make a better version using the `switch` statement:\r\n\r\n```js\r\n// Better version\r\nlet weekDay = '';\r\nswitch (day) {\r\n    case 0:\r\n        weekDay = 'Sunday';\r\n        break;\r\n    case 1:\r\n        weekDay = 'Monday';\r\n        break;\r\n    // More cases are omitted\r\n    //...\r\n    case 6:\r\n        weekDay = 'Saturday';\r\n        break;\r\n}\r\n```\r\n\r\nUsing the `switch` statement makes the code more readable, but it seem that the number of line-of-codes in both approaches are the same.\r\n\r\nIn pure English, we map _0_ with _Sunday_, _1_ with _Monday_, and so forth. Why don't we create a lookup table that quickly returns the matching item based on given key?\r\n\r\n```js\r\n// The best version\r\nconst lookup = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\nconst weekDay = lookup[day];\r\n```\r\n\r\nThe code is short, and only uses `const` for variable declarations meaning that it doesn't have side effects and easy to test.\r\n\r\nIn reality, a lookup table can be an array, object literal or a `Map`. The data structure varies depending on your business logic.\r\n\r\nAs long as you get the idea, the following example uses the same practice. It is a function that converts a given number to the Roman numeral representation.\r\n\r\n```js\r\nconst lookup = [\r\n    ['M', 1000],\r\n    ['CM', 900],\r\n    ['D', 500],\r\n    ['CD', 400],\r\n    ['C', 100],\r\n    ['XC', 90],\r\n    ['L', 50],\r\n    ['XL', 40],\r\n    ['X', 10],\r\n    ['IX', 9],\r\n    ['V', 5],\r\n    ['IV', 4],\r\n    ['I', 1],\r\n];\r\n\r\nconst convertToRoman = (number) =>\r\n    lookup.reduce((curr, [key, value]) => {\r\n        curr += key.repeat(Math.floor(number / value));\r\n        number = number % value;\r\n        return curr;\r\n    }, '');\r\n\r\nconvertToRoman(20); // 'XX'\r\nconvertToRoman(21); // 'XXI'\r\nconvertToRoman(2021); // 'MMXXI'\r\n```\r\n\r\n> If a function uses a fixed lookup table, it's recommended to move the lookup to outside of the function\r\n\r\n### See also\r\n\r\n-   [Early return](/early-return.html)\r\n-   [Replace multiple if statements with a single switch statement](/replace-multiple-if-statements-with-a-single-switch-statement.html)\r\n-   [Use Array.includes for multiple conditionals](/use-array-includes-for-multiple-conditionals.html)\r\n","slug":"replace-multiple-if-statements-with-a-lookup-table","title":"Replace multiple if statements with a lookup table","topics":"JavaScript"},{"category":"Trick","content":"\r\nWe demonstrate the trick with a simple issue: Determine the quarter of a given date.\r\nSince the month in JavaScript is zero-based, the month of a given `date` can be determined as\r\n\r\n```js\r\n// `date` is the input date\r\nconst month = date.getMonth() + 1;\r\n```\r\n\r\nThe quarter is calculated based on the range of month:\r\n\r\n```js\r\nlet quarter = 1;\r\nif (month <= 3) {\r\n    quarter = 1;\r\n} else if (month <= 6) {\r\n    quarter = 2;\r\n} else if (month <= 9) {\r\n    quarter = 3;\r\n} else {\r\n    quarter = 4;\r\n}\r\n```\r\n\r\nIt is not easy for us to scan multiple `if` statements above. We can make it more readable with a single `switch (true)` statement:\r\n\r\n```js\r\nswitch (true) {\r\n    case month <= 3:\r\n        quarter = 1;\r\n        break;\r\n    case month <= 6:\r\n        quarter = 2;\r\n        break;\r\n    case month <= 9:\r\n        quarter = 3;\r\n        break;\r\n    default:\r\n        quarter = 4;\r\n        break;\r\n}\r\n```\r\n\r\n> This trick gives us an idea of using `switch (true)` to make the code more readable. The specific issue in this post, calculating the [quarter of a given date](https://1loc.dev/#get-the-current-quarter-of-a-date), can be done with a [single line-of-code](https://1loc.dev).\r\n\r\n### See also\r\n\r\n-   [Early return](/early-return.html)\r\n-   [Replace multiple if statements with a lookup table](/replace-multiple-if-statements-with-a-lookup-table.html)\r\n-   [Use Array.includes for multiple conditionals](/use-array-includes-for-multiple-conditionals.html)\r\n","slug":"replace-multiple-if-statements-with-a-single-switch-statement","title":"Replace multiple if statements with a single switch statement","topics":"JavaScript"},{"category":"Tip","content":"\r\nIf you want to return an object literal in an arrow function, just wrap the object in `()`:\r\n\r\n```js\r\n// Doesn't work\r\nconst formatName = (first, last) => {\r\n  full: `${first} ${last}`,\r\n  short: `${first.charAt(0)} ${last.charAt(0)}`.toUpperCase(),\r\n};\r\n\r\n// Work\r\nconst formatName = (first, last) => ({\r\n  full: ...,\r\n  short: ...,\r\n});\r\n\r\nformatName('John', 'Doe');  // { full: 'John Doe', short: 'J D' }\r\n```\r\n","slug":"return-an-object-in-an-arrow-function-quickly","title":"Return an object in an arrow function quickly","topics":"JavaScript"},{"category":"Best practice","content":"\r\nInstead of repeating colors in a few places, we can define a value for the `color` property once and reuse it with the `currentColor` keyword.\r\n\r\n```css\r\n/* Bad */\r\ndiv {\r\n    color: #d1d5db;\r\n    background-image: linear-gradient(to bottom, #d1d5db, #fff);\r\n}\r\n\r\n/* Good */\r\ndiv {\r\n    color: #d1d5db;\r\n    background-image: linear-gradient(to bottom, currentColor, #fff);\r\n}\r\n```\r\n\r\nBecause the `color` property of an element, if not specified, is inherited from its parent, we can use the `currentColor` keyword in the children of element.\r\n\r\nFor example, let's say that we want the color of a link to be the same with its container, a given `div` element:\r\n\r\n```css\r\n/* Bad: Declare same color in three places */\r\ndiv {\r\n    color: #fff;\r\n}\r\ndiv a {\r\n    border-bottom: 1px solid #fff;\r\n    color: #fff;\r\n    text-decoration: none;\r\n}\r\n\r\n/* Good */\r\ndiv {\r\n    color: #fff;\r\n}\r\ndiv a {\r\n    border-bottom: 1px solid currentColor;\r\n    color: currentColor;\r\n    text-decoration: none;\r\n}\r\n```\r\n\r\n> We often use the `currentColor` keyword in the _camelCase_ format. However, CSS is case-insensitive meaning that `CurrentColor`, `currentcolor` or even `cUrReNtCoLoR` are valid keywords and have the same effect as `currentColor`\r\n","slug":"reuse-the-current-color","title":"Reuse the current color","topics":"CSS"},{"category":"Tip","content":"\r\nWe often see an error when executing a command that requires the root user permission. For example, installing a npm package as global probably requires `sudo`:\r\n\r\n```shell\r\n$ npm install -g package-name\r\n```\r\n\r\nIn order to sudo the previous command, usually we press the _Arrow_ key, append `sudo` to the beginning of the command and run it again.\r\n\r\nIt turns out that there is an easier, shorter command:\r\n\r\n```shell\r\n$ sudo !!\r\n```\r\n\r\nHere `!!` references the last command.\r\n","slug":"run-the-last-command-as-the-root-user","title":"Run the last command as the root user","topics":"Command Line"},{"category":"Trick","content":"\r\nSay we are creating a library and want to export our APIs to the consumers. In order to support the CommonJS module, we use the following check:\r\n\r\n```js\r\nif (typeof module !== 'undefined') {\r\n    module.exports = ourFunction;\r\n}\r\n```\r\n\r\nHowever, it can be shorten and saved a few bytes when being minified:\r\n\r\n```js\r\nif (typeof module < 'u') {\r\n    // ...\r\n}\r\n```\r\n\r\nI saw that trick when looking at the [Preact](https://preactjs.com)'s [source](https://github.com/preactjs/preact/blob/master/src/cjs.js).\r\n","slug":"save-a-few-bytes-when-checking-the-existence-of-module","title":"Save a few bytes when checking the existence of module","topics":"JavaScript"},{"category":"Tip","content":"\r\nThe `content` property of the `:after` selector can be used to separate list items:\r\n\r\n```css\r\n/* Inline items */\r\nspan:not(:last-child):after {\r\n    content: ' • ';\r\n}\r\n\r\n/* List items */\r\nli:not(:last-child):after {\r\n    content: ',';\r\n}\r\n```\r\n\r\nThe footer of this website uses the same technique.\r\n\r\n### Demo\r\n\r\n:demo[]{title=\"Separate list items\" url=\"/demo/separate-list-items/index.html\"}\r\n\r\n### See also\r\n\r\n-   [Style list items with special characters](/style-list-items-with-special-characters.html)\r\n","slug":"separate-list-items","title":"Separate list items","topics":"CSS"},{"category":"Tip","content":"\r\nFor a link whose content is empty, we can replace the content with the `href` attribute:\r\n\r\n```css\r\na[href^='http']:empty:before {\r\n    content: attr(href);\r\n}\r\n```\r\n\r\n### Demo\r\n\r\n:demo[]{title=\"Set content for an empty link\" url=\"/demo/set-content-for-an-empty-link/index.html\"}\r\n","slug":"set-content-for-an-empty-link","title":"Set content for an empty link","topics":"CSS"},{"category":"Tip","content":"\r\nWhen we're working in a team, we would like to use the same set of tools to make the development process more robust and productive.\r\n\r\nWith Visual Studio Code, it makes sense to use the same set of extensions.\r\n\r\nYou can share the extensions with other people in your team by creating a file `extensions.json` located in the `.vscode` folder.\r\n\r\n```json\r\n{\r\n    \"recommendations\": [\"dbaeumer.vscode-eslint\", \"esbenp.prettier-vscode\", \"svelte.svelte-vscode\"]\r\n}\r\n```\r\n\r\nThe `recommendations` key contains the list of extensions which each of them is defined by an extension identifier.\r\n\r\n> You can see the list of installed extensions by running the command:\r\n>\r\n> ```shell\r\n> $ code --list-extensions\r\n>\r\n> # Example output\r\n> dbaeumer.vscode-eslint\r\n> rvest.vs-code-prettier-eslint\r\n> svelte.svelte-vscode\r\n> ```\r\n\r\nVisual Studio Code will ask your teammates to install the recommended extensions when they open the workspace for the first time. They can do it anytime when clicking `Extensions: Show Recommended Extensions command`.\r\n","slug":"share-recommendation-visual-studio-code-extensions","title":"Share recommendation Visual Studio Code extensions","topics":"Visual Studio Code"},{"category":"Trick","content":"\r\nThe comma operator (`,`) used in the following form evaluates the left-hand side (`a`) and returns the value of the right-hand side (`b`):\r\n\r\n```js\r\nconst c = (a, b);\r\n```\r\n\r\nWe can use it to shorten codes in some cases.\r\n\r\n### Shorten an if statement\r\n\r\n```js\r\nlet result;\r\nif (condition) {\r\n    doSomething();\r\n    result = value;\r\n} else {\r\n    result = other;\r\n}\r\n\r\n// Shorten version\r\nconst result = condition ? (doSomething(), value) : other;\r\n```\r\n\r\n### Shorten an arrow function\r\n\r\n```js\r\nconst arrowFn = (arg) => {\r\n    doSomething();\r\n    return result;\r\n};\r\n\r\n// Shorten version\r\nconst arrowFn = (arg) => (doSomething(), result);\r\n```\r\n\r\nHere is a few examples of using the comma operator to [shorten](https://1loc.dev) arrow functions:\r\n\r\n-   [Count the occurrences of array elements](https://1loc.dev/#count-the-occurrences-of-array-elements)\r\n\r\n```js\r\nconst countOccurrences = (arr) => arr.reduce((p, c) => ((p[c] = ++p[c] || 1), p), {});\r\n\r\ncountOccurrences([2, 1, 3, 3, 2, 3]);\r\n// { '1': 1, '2': 2, '3': 3 }\r\n```\r\n\r\n-   [Split an array into chunks](https://1loc.dev/#split-an-array-into-chunks)\r\n\r\n```js\r\nconst chunk = (arr, s) => arr.reduce((a, e, i) => (i % s ? a[a.length - 1].push(e) : a.push([e]), a), []);\r\n\r\nchunk([1, 2, 3, 4, 5, 6, 7, 8], 3);\r\n// [[1, 2, 3], [4, 5, 6], [7, 8]]\r\n```\r\n\r\n### See also\r\n\r\n-   [Log a variable in an arrow function](/log-a-variable-in-an-arrow-function.html)\r\n","slug":"shorten-codes-with-the-comma-operator","title":"Shorten codes with the comma operator","topics":"JavaScript"},{"category":"Tip","content":"\r\nIn TypeScript, we often use the relative path to import a particular file. Here is an example of importing multiple files from the `helper` and `services` folder:\r\n\r\n```js\r\nimport { validator } from '../../../helpers/validator';\r\nimport { authService } from '../../../services/authService';\r\n```\r\n\r\nThe disadvantage is that when we change the directory structure, these imports must be updated accordingly. Despite the fact that popular editors such as Visual Studio Code updates the paths automatically, it doesn't ensure that the process works all the time.\r\n\r\nFortunately, TypeScript provides the ability of using the absolute paths. In the TypeScript configuration file, `tsconfig.json`, we can indicate the alias for particular paths under the `paths` property.\r\n\r\nFor example, the following settings will find all imports starting with `@` in the `src` folder:\r\n\r\n```json\r\n{\r\n    \"paths\": {\r\n        \"@/*\": [\"src/*\"]\r\n    }\r\n}\r\n```\r\n\r\n| Import path                | Identical absolute path       |\r\n| -------------------------- | ----------------------------- |\r\n| `@/helpers/validator`      | `src/helpers/validator`       |\r\n| `@/services/authService`   | `src/services/authService`    |\r\n\r\nOur imports can be shorten as following:\r\n\r\n```js\r\nimport { validator } from '@/helpers/validator';\r\nimport { authService } from '@/services/authService';\r\n```\r\n\r\nSome libraries, Angular for instance, follows a specific pattern of directory structure, we can pre-define the path for given folders:\r\n\r\n```json\r\n{\r\n    \"paths\": {\r\n        \"@helpers/*\": [\"src/helpers/*\"],\r\n        \"@models/*\": [\"src/models/*\"],\r\n        \"@services/*\": [\"src/services/*\"]\r\n    }\r\n}\r\n```\r\n\r\nThen the imports of files belonging to these folders can be shorten as below:\r\n\r\n```js\r\nimport { validator } from '@helpers/validator';\r\nimport { userModel } from '@models/user';\r\nimport { authService } from '@services/authService';\r\n```\r\n\r\n### See also\r\n\r\n-   [Shorten import paths in Webpack](/shorten-import-paths-in-webpack.html)\r\n","slug":"shorten-import-paths-in-typescript","title":"Shorten import paths in TypeScript","topics":"TypeScript"},{"category":"Tip","content":"\r\nSay you're using [Webpack](https://webpack.js.org) to bundle your application.\r\nIf you think that using a relative path when importing a given file is ugly and hard to maintain when changing the directory structure:\r\n\r\n```js\r\nimport { formatDate } from '../../../helpers/formatDate';\r\n```\r\n\r\nThen using the aliases is one of the solutions. Webpack allows to map a prefix of import path to a given path. For example, we would like to map all the imports starting with `@` to the `src` folder.\r\n\r\nThe Webpack config looks like:\r\n\r\n```js\r\n// webpack.config.js\r\nconst path = require('path');\r\n\r\nmodule.exports = {\r\n    resolve: {\r\n        alias: {\r\n            // Assume that the `src` folder is located at the root folder\r\n            '@': path.join(__dirname, 'src'),\r\n        },\r\n    },\r\n};\r\n```\r\n\r\nThe helper function mentioned at the top can be shorten as below:\r\n\r\n```js\r\nimport { formatDate } from '@/helpers/formatDate';\r\n```\r\n\r\nWebpack will be looking for the helper in the `src/helpers/formatDate` file.\r\n\r\n### See also\r\n\r\n-   [Shorten import paths in TypeScript](/shorten-import-paths-in-typescript.html)\r\n","slug":"shorten-import-paths-in-webpack","title":"Shorten import paths in Webpack","topics":"Webpack"},{"category":"Tip","content":"\r\nBy using the `:empty` selector, it's possible for us to show a custom placeholder.\r\n\r\n```css\r\nul:empty::after {\r\n    content: 'Empty';\r\n}\r\n```\r\n\r\nIf you want the placeholder to be more flexible instead of being hardcoded in CSS, it can be taken from an attribute, such as `data-placeholder`:\r\n\r\n```css\r\nul:empty::after {\r\n    content: attr(data-placeholder);\r\n}\r\n```\r\n\r\n> The `:empty` selector doesn't have effect if the list contains a whitespace or an empty child node\r\n\r\n### Demo\r\n\r\n:demo[]{title=\"Show a placeholder for an empty list\" url=\"/demo/show-a-placeholder-for-an-empty-list/index.html\"}\r\n","slug":"show-a-placeholder-for-an-empty-list","title":"Show a placeholder for an empty list","topics":"CSS"},{"category":"Trick","content":"\r\nThere are cases that we would like to populate the full text in generated HTML, but only the first letter is displayed.\r\nThe remaining characters are hidden visually. It's usesful when we have to support a smaller screen, for example.\r\n\r\nThe trick here is to set zero font size for the element, whereas the first letter has a normal font size.\r\n\r\n```css\r\n.element {\r\n    font-size: 0;\r\n}\r\n.element::first-letter {\r\n    font-size: 1.5rem;\r\n}\r\n```\r\n\r\n### Demo\r\n\r\n:demo[]{title=\"Show the first letter only\" url=\"/demo/show-the-first-letter-only/index.html\"}\r\n","slug":"show-the-first-letter-only","title":"Show the first letter only","topics":"CSS"},{"category":"Tip","content":"\r\nWe often use the `npm init` command to initialize a `package.json` file. The command will ask you some questions that are used to fill the content of `package.json` later.\r\n\r\n```shell\r\n$ npm init\r\npackage name: (dev)\r\nversion: (1.0.0)\r\n...\r\n```\r\n\r\nIf you're a lazy at this step and would like to manually edit the file, you can skip all questions by using the `y` parameter:\r\n\r\n```shell\r\n$ npm init -y\r\n\r\n// Or\r\n$ npm init --yes\r\n```\r\n\r\nThen it will create a `package.json` file with the default value for basic options as following:\r\n\r\n```json\r\n{\r\n    \"name\": \"dev\",\r\n    \"version\": \"1.0.0\",\r\n    \"description\": \"\",\r\n    \"main\": \"index.js\",\r\n    \"scripts\": {\r\n        \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\r\n    },\r\n    \"keywords\": [],\r\n    \"author\": \"\",\r\n    \"license\": \"ISC\"\r\n}\r\n```\r\n","slug":"skip-questions-when-creating-a-package-json-file","title":"Skip questions when creating a package.json file","topics":"NPM"},{"category":"Tip","content":"\r\nIt's common to use anchors, `<a href=\"#destination\">` for example, to link between elements in a page. By default, the browser will jump straightly to the destination when clicking an anchor.\r\n\r\nWithout using any JavaScript library, it's possible to scroll to given element smoothly with a simple CSS property. Setting it to the `html` element enables smooth scrolling effect to the whole page:\r\n\r\n```css\r\nhtml {\r\n    scroll-behavior: smooth;\r\n}\r\n```\r\n\r\nWe can also apply the style for a given scrollable container:\r\n\r\n```css\r\n.container {\r\n    scroll-behavior: smooth;\r\n}\r\n```\r\n\r\n### See also\r\n\r\n-   [Prevent anchor links from disappearing behind a sticky header](/prevent-anchor-links-from-disappearing-behind-a-sticky-header.html)\r\n","slug":"smooth-scrolling-with-pure-css","title":"Smooth scrolling with pure CSS","topics":"CSS"},{"category":"Best practice","content":"\r\nIn the old days of the Internet, Netscape Navigator and Microsoft Internet Explorer were popular browsers. They had different sets of rules so that web pages have two different versions to serve them.\r\n\r\nLater on, more browsers come and the Internet has standard specifications. But they have to support two different ways to render a webpage: standards and quirks modes. The standard mode is used to render pages using the standard web specifications, whereas the quick mode is used to support legacy websites.\r\n\r\nThese two modes are distinguished by the doctype which refers to _Document Type Definition_ (or DTD). It defines a set of rules for a particular HTML version. Below is an example of DocType declarations:\r\n\r\n```html\r\n<!-- HTML 4.01 -->\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\r\n\r\n<!-- HTML 5 -->\r\n<!DOCTYPE html>\r\n```\r\n\r\nIf a page doesn't specify the doctype, it will be rendered in the quirks mode. As a result, it causes the page to have some weird appearance issues. For example, this page lists [quirks](https://developer.mozilla.org/en-US/docs/Mozilla/Mozilla_quirks_mode_behavior) on the Firefox browser.\r\n\r\nSince HTML5 was introduced, we just simply add its doctype to the top of page:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n    ...\r\n</html>\r\n\r\n<!-- Or -->\r\n<!DOCTYPE html>\r\n<html>\r\n    ...\r\n</html>\r\n```\r\n","slug":"specify-the-doctype","title":"Specify the doctype","topics":"HTML"},{"category":"Tip","content":"\r\nIt's easy for us to test a HTML file just by simply opening it with our favourite browser. It doesn't work if we have to communicate with a remote server such as fetching data via Ajax requests.\r\n\r\nThat's where a simple HTTP server comes. macOS gives us the ability to run a simple web server from any folder.\r\n\r\n```shell\r\n$ python -m SimpleHTTPServer 8000\r\n```\r\n\r\nOr\r\n\r\n```shell\r\n$ php -S localhost:8000\r\n```\r\n\r\nThe commands above create servers on the port 8000. It's up to you to change the port number if it's taken by another server.\r\nThe first command only serves HTML files while the last one can run PHP files.\r\n","slug":"start-a-simple-web-server-on-macos","title":"Start a simple web server on macOS","topics":"macOS"},{"category":"Tip","content":"\r\nBy default, the browser will display a placeholder for a broken image. This post introduces a simple tip to replace that placeholder with our stylable elements.\r\n\r\nWhen the image is not found, the `::before` and `::after` pseudo-elements are displayed as long as they have content. We can take this advantage to make these elements visible to the user.\r\n\r\n```css\r\nimg {\r\n    position: relative;\r\n\r\n    /* The initial styles */\r\n    display: block;\r\n    height: auto;\r\n    min-height: 4rem;\r\n    width: 100%;\r\n}\r\n\r\nimg::before,\r\nimg::after {\r\n    /* Take full size of the image */\r\n    height: 100%;\r\n    left: 0;\r\n    position: absolute;\r\n    top: 0;\r\n    width: 100%;\r\n}\r\n\r\nimg::before {\r\n    /* Hide the default placeholder */\r\n    background: #fff;\r\n    content: '';\r\n}\r\n\r\nimg::after {\r\n    /* Taken from the `alt` attribute of the element */\r\n    content: attr(alt) ' image is broken';\r\n    border: 2px dotted #d1d5db;\r\n\r\n    /* Center */\r\n    align-items: center;\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n```\r\n\r\n### Demo\r\n\r\nThe demo below shows extra elements for a broken image whose markup is\r\n\r\n```html\r\n<img src=\"/img/not-found.png\" alt=\"front-end tips\" />\r\n```\r\n\r\n:demo[]{title=\"Style broken images\" url=\"/demo/style-broken-images/index.html\"}\r\n","slug":"style-broken-images","title":"Style broken images","topics":"CSS"},{"category":"Tip","content":"\r\nBy default, an ordered list prefixes each item with its index number. Since there is no actual element or CSS property that represents the index number, we can't add custom styles for it directly.\r\n\r\nThe approach is that we hide the original index numbers, and number the items ourselves. The first task is quite easy:\r\n\r\n```css\r\nol {\r\n    list-style-type: none;\r\n}\r\n```\r\n\r\nThe index numbers start from zero, and increase by one after each item. It gives us a hint that we can use a CSS counter to represent the indices:\r\n\r\n```css\r\nol {\r\n    counter-reset: ol-counter;\r\n}\r\nli {\r\n    counter-increment: ol-counter;\r\n}\r\n```\r\n\r\nFinally, use the `::before` pseudo element to display the number:\r\n\r\n```css\r\nli::before {\r\n    content: counter(ol-counter);\r\n}\r\n```\r\n\r\n### Demo\r\n\r\n:demo[]{title=\"Style index numbers of list items\" url=\"/demo/style-index-numbers-of-list-items/index.html\"}\r\n\r\n### See also\r\n\r\n-   [Append leading zeros to ordered list items](/append-leading-zeros-to-ordered-list-items.html)\r\n-   [Number headings and subheadings automatically](/number-headings-and-subheadings-automatically.html)\r\n-   [Style list items with special characters](/style-list-items-with-special-characters.html)\r\n","slug":"style-index-numbers-of-list-items","title":"Style index numbers of list items","topics":"CSS"},{"category":"Tip","content":"\r\nWe often use circles or squares to style list items as following:\r\n\r\n```css\r\nli {\r\n    list-style-type: circle;\r\n}\r\n```\r\n\r\nDo you know that the `list-style-type` property also accepts a character. It means that we can use an emoji or Unicode character:\r\n\r\n```css\r\nli {\r\n    list-style-type: '☀️';\r\n}\r\n\r\n/* Or */\r\nli {\r\n    list-style-type: '\\2600';\r\n}\r\n```\r\n\r\n### Demo\r\n\r\n:demo[]{title=\"Style list items with special characters\" url=\"/demo/style-list-items-with-special-characters/index.html\"}\r\n\r\n### See also\r\n\r\n-   [Separate list items](/separate-list-items.html)\r\n-   [Style index numbers of list items](/style-index-numbers-of-list-items.html)\r\n","slug":"style-list-items-with-special-characters","title":"Style list items with special characters","topics":"CSS"},{"category":"Tip","content":"\r\nThere are a few ways to [swap two variables](https://1loc.dev/#swap-two-variables) without using a temporary variable:\r\n\r\n```js\r\n[a, b] = [b, a];\r\n\r\n// Or\r\na = [b, (b = a)][0];\r\n\r\n// Or\r\na = ((x) => x)(b, (b = a));\r\n```\r\n\r\nIf both variables are numbers, then you can swap them with operators:\r\n\r\n```js\r\na = b + ((b = a), 0);\r\n\r\n// Or\r\na = b * ((b = a), 1);\r\n```\r\n","slug":"swap-two-variables","title":"Swap two variables","topics":"JavaScript"},{"category":"Tip","content":"\r\nWe can quickly show or hide all hidden files on macOS _Finder_ by compressing <kbd>cmd</kbd> + <kbd>shift</kbd> + <kbd>.</kbd>\r\n\r\n<video loop muted controls>\r\n  <source src=\"/img/toggle-hidden-files.mp4\" type=\"video/mp4\">\r\n</video>\r\n","slug":"toggle-hidden-files-on-macos","title":"Toggle hidden files on macOS","topics":"macOS"},{"category":"Trick","content":"\r\nAssume that you want to test the keyboard accessibility in your website.\r\n\r\nThere's a case that the pressing the _Tab_ key jumps to a particular element which is invisible in the viewport.\r\n\r\nChrome DevTools provides the ability of tracking the focused element.\r\n\r\n-   Open the _Console_\r\n-   Click the eye icon which is located at the right of the Filter box to create a live expression\r\n-   Type `document.activeElement`\r\n\r\nThis live expression will represent the active element which has the focus currently. You can right click on the expression's result and then choose _Reveal in Elements panel_ to inspect the focused element.\r\n\r\n![Track the focused element](/img/track-focused-element.png)\r\n\r\n### See also\r\n\r\n-   [Watch a variable's value with live expressions](/watch-a-variable-value-with-live-expressions.html)\r\n","slug":"track-the-focused-element-with-chrome-devtools","title":"Track the focused element with Chrome DevTools","topics":"DevTools"},{"category":"Tip","content":"\r\nWhen transforming a given variable to the JSON representation, we might see unexpected results if the variable contains an unserializable property.\r\n\r\nLet's consider a simple object that represents the information of a person. It has the `phones` property that is a set of different phone numbers.\r\n\r\n```js\r\nconst person = {\r\n    name: 'John Doe',\r\n    ages: 42,\r\n    phones: new Set(['123', '456', '789']),\r\n};\r\n```\r\n\r\nThe set is transformed to an empty object which is unexpected output:\r\n\r\n```js\r\nJSON.stringify(person);\r\n\r\n// \"{\"name\":\"John Doe\",\"ages\":42,\"phones\":{}}\"\r\n```\r\n\r\nWe can solve the issue by passing the second parameter to the `stringify` function. It can be a function of two parameters representing the key and value of the current iterated item.\r\n\r\n```js\r\nJSON.stringify(variable, (key, value) => {\r\n    // The return value will be used in final output\r\n\r\n    // If the function returns `undefined`,\r\n    // the item will be excluded from the output\r\n    return ...;\r\n});\r\n```\r\n\r\nHere is how the phone numbers are transformed when we see the `phones` key:\r\n\r\n```js\r\nJSON.stringify(person, (key, value) => (key === 'phones' ? [...value.values()] : value));\r\n\r\n// \"{\"name\":\"John Doe\",\"ages\":42,\"phones\":[\"123\",\"456\",\"789\"]}\"\r\n```\r\n\r\nWant to transform all `Set` values? No problem!\r\n\r\n```js\r\nJSON.stringify(person, (key, value) => (value instanceof Set ? [...value.values()] : value));\r\n```\r\n\r\n### See also\r\n\r\n-   [Log the full object in NodeJS](/log-the-full-object-in-nodejs.html)\r\n-   [Pick given properties from a JSON representation](/pick-given-properties-from-a-json-representation.html)\r\n-   [Pretty format JSON](/pretty-format-json.html)\r\n","slug":"transform-values-from-a-json-representation","title":"Transform values from a JSON representation","topics":"JavaScript"},{"category":"Best practice","content":"\r\nBoth `Number()` and `parseInt` accept the spaces in input. But be aware that you could get different result when passing a value with spaces as following:\r\n\r\n```js\r\nparseInt('   5   '); // 5\r\nparseInt('12 345'); // 12, not 12345\r\n```\r\n\r\nTo avoid the similar situations, you should [remove all spaces](https://1loc.dev/#remove-spaces-from-a-string) before parsing:\r\n\r\n```js\r\nparseInt(value.replace(/\\s+/g, ''), 10);\r\n```\r\n","slug":"trim-the-spaces-before-parsing-a-number","title":"Trim the spaces before parsing a number","topics":"JavaScript"},{"category":"Tip","content":"\r\nI'm pretty sure that it's one of well-known CSS snippets to truncate long text:\r\n\r\n```css\r\n.truncate {\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n}\r\n```\r\n\r\nHowever, it truncates the origin text to a single line. If you want to truncate to a given number of lines, then the [`-webkit-line-clamp` property](https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-line-clamp) comes in handy.\r\n\r\nThe CSS declaration below limits the number of lines to 3:\r\n\r\n```css\r\n.truncate {\r\n    display: -webkit-box;\r\n    -webkit-box-orient: vertical;\r\n    -webkit-line-clamp: 2;\r\n    overflow: hidden;\r\n}\r\n```\r\n\r\nNote that the `-webkit-line-clamp` property only works when we have `display: -webkit-box` and `-webkit-box-orient: vertical` declarations.\r\n\r\n### Demo\r\n\r\n:demo[]{title=\"Truncate long text\" url=\"/demo/truncate-long-text/index.html\"}\r\n","slug":"truncate-long-text","title":"Truncate long text","topics":"CSS"},{"category":"Tip","content":"\r\nWe can use the destructuring assignment syntax to unpack a property of a given object and rename it:\r\n\r\n```js\r\nconst person = {\r\n    name: 'John Doe',\r\n};\r\n\r\nconst { name } = person;\r\n\r\n// Or unpack with other name\r\nconst { name: fullName } = person;\r\n```\r\n\r\nIn the sample code above, `fullName` is an alias of the `name` property. Both the `name` and `fullName` variables are `John Doe`.\r\n","slug":"unpack-a-property-of-an-object-with-different-name","title":"Unpack a property of an object with different name","topics":"JavaScript"},{"category":"Best practice","content":"\r\nYou can use an underscore to name the argument which is not used in an arrow function. It makes the code more readable.\r\n\r\n```js\r\n// No arguments\r\nconst noop = _ => {};\r\n\r\nconst range = (min, max) => (\r\n    Array(max - min + 1).fill(0).map((_, i) => min + i);\r\n);\r\n```\r\n\r\n### See also\r\n\r\n-   [Ignore items from array destructuring](/ignore-items-from-array-destructuring.html)\r\n","slug":"use-an-underscore-to-name-unused-argument","title":"Use an underscore to name unused argument","topics":"JavaScript"},{"category":"Tip","content":"\r\nLet's consider a function that determines the total [number of days](https://1loc.dev/#get-the-number-of-days-in-given-month) in a given month.\r\n\r\n```js\r\nconst getDays = (month, year) => {\r\n  ...\r\n};\r\n```\r\n\r\nSince months in JavaScripts start from 0, we assume that the `month` parameter is zero-based index. We can make the function [quickly return](/early-return.html) if the month is April, June, September or November:\r\n\r\n```js\r\nif (month === 3 || month === 5 || month === 8 || month === 10) {\r\n  return 30;\r\n}\r\n...\r\n```\r\n\r\nThese conditionals can be replaced with a single check by using the `Array.includes` function:\r\n\r\n```js\r\nif ([3, 5, 8, 10].includes(month)) {\r\n  return 30;\r\n}\r\n...\r\n```\r\n\r\nFor this specific function, we also can use a [lookup table](/replace-multiple-if-statements-with-a-lookup-table.html):\r\n\r\n```js\r\nconst isLeapYear = (year) => year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\r\n\r\nconst getDays = (month, year) => [31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];\r\n```\r\n\r\n### See also\r\n\r\n-   [Early return](/early-return.html)\r\n-   [Replace multiple if statements with a lookup table](/replace-multiple-if-statements-with-a-lookup-table.html)\r\n-   [Replace multiple if statements with a single switch statement](/replace-multiple-if-statements-with-a-single-switch-statement.html)\r\n","slug":"use-array-includes-for-multiple-conditionals","title":"Use Array.includes for multiple conditionals","topics":"JavaScript"},{"category":"Tip","content":"\r\nIn the front-end development, supporting different browsers is a challenge. Using CSS fallback properties is a common tip to support the cross-browser compatibility.\r\n\r\nWe can set different values for the same CSS property. The browser will apply the last supported declaration.\r\n\r\nUsually we put the most supported value first. The other values, vendor-prefixed for example, are declared later. If the browser can't recognize them, it will fallback to the previous value.\r\n\r\nFor example, the [`linear-gradient()` function](<https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient()>) is supported in modern browsers, but we have been familiar with the sample code below in the old days.\r\n\r\n```css\r\ndiv {\r\n    background-image: url(/path/to/fallback-gradient.svg);\r\n    background-image: -webkit-gradient(...);\r\n    background-image: -webkit-linear-gradient(...);\r\n    background-image: -moz-linear-gradient(...);\r\n    background-image: -ms-linear-gradient(...);\r\n    background-image: -o-linear-gradient(...);\r\n    background-image: linear-gradient(...);\r\n}\r\n```\r\n","slug":"use-css-fallback-properties","title":"Use CSS fallback properties","topics":"CSS"},{"category":"Best practice","content":"\r\nWe often use the `appendChild` method to [add a new element](https://htmldom.dev/append-to-an-element) to a given element:\r\n\r\n```js\r\nconst li = document.createElement('li');\r\nli.innerHTML = 'List item';\r\n\r\n// Append to given list\r\nul.appendChild(li);\r\n```\r\n\r\nWhen a new element is inserted to the page, the browser has to recompute the dimensions of its parent and the parent's child nodes. The process is known as the reflow.\r\nSimilarly, changing the styles of the element might cause a repaint.\r\n\r\nAdding a big list of elements to the document might affect the performance of page because it triggers reflow multiple times:\r\n\r\n```js\r\nfor (let i = 0; i < 100; i++) {\r\n    const li = document.createElement('li');\r\n    li.innerHTML = `List item ${i}`;\r\n    ul.appendChild(li);\r\n}\r\n```\r\n\r\nDepsite the fact that modern browsers make a lot of optimizations including batch updates, it's recommended to use `DocumentFragment` in this case.\r\nWe create a minimal document without parent, and append our elements to it. It doesn't trigger any reflow or repaint because the document fragment hasn't been added to the page yet:\r\n\r\n```js\r\nconst fragment = document.createDocumentFragment();\r\n\r\nfor (let i = 0; i < 100; i++) {\r\n    const li = document.createElement('li');\r\n    li.innerHTML = `List item ${i}`;\r\n    fragment.appendChild(li);\r\n}\r\n```\r\n\r\nFinally, the document fragment is inserted to the page:\r\n\r\n```js\r\nul.appendChild(fragment);\r\n```\r\n\r\nThe reflow is triggered once!\r\n","slug":"use-documentfragments-when-adding-a-big-list-of-elements","title":"Use DocumentFragments when adding a big list of elements","topics":"DOM, JavaScript"},{"category":"Tip","content":"\r\nRather than entering the username and password, you often use SSH keys to access GitHub repositories. It's a more secured and recommended way to communicate with remote GitHub servers.\r\n\r\nSometimes you have more than one GitHub account. For example, one for accessing personal repositories, another one for your daily works.\r\n\r\nThe question is how your local Git recogranizes a repository that comes with which GitHub account. This tip will help you.\r\n\r\n### Creating different keys\r\n\r\nAssume that `foo` and `bar` are two GitHub usernames that you would like to use in the same computer. You can follow the official GitHub guide to [generate SSH key](https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent).\r\n\r\n```shell\r\n// Generate SSH key for `foo`\r\n$ ssh-keygen -t ed25519 -C \"foo@domain.com\"\r\n```\r\n\r\nWhen you're asked to indicate the file to save the key, don't use the default key. Change the name of file to something associate with the account, for example:\r\n\r\n```shell\r\nEnter a file in which to save the key (/home/you/.ssh/id_ed25519):\r\n`/home/you/.ssh/id_foo`\r\n```\r\n\r\nRepeat the same steps for the `bar` account. Now, we have two private keys, `id_foo` and `id_bar` located at the `~/.ssh` folder.\r\n\r\n### Adding keys to SSH agent\r\n\r\n```shell\r\n// Delete cached keys\r\n$ ssh-add -D\r\n\r\n// Start the ssh-agent in the background\r\n$ eval \"$(ssh-agent -s)\"\r\n\r\n// Add your SSH private keys to the ssh-agent\r\n$ ssh-add ~/.ssh/id_foo\r\n$ ssh-add ~/.ssh/id_bar\r\n```\r\n\r\n### Mapping keys to GitHub repos\r\n\r\nThis step lets SSH know which private key should be used for particular hosts.\r\n\r\n```shell\r\n$ cd ~/.ssh\r\n$ touch config\r\n```\r\n\r\nAdd the following content to the `config` file:\r\n\r\n```shell\r\nHost github.com-foo\r\n  HostName github.com\r\n  User git\r\n  IdentityFile ~/.ssh/id_foo\r\n  IdentitiesOnly yes\r\n\r\nHost github.com-bar\r\n  HostName github.com\r\n  User git\r\n  IdentityFile ~/.ssh/id_bar\r\n  IdentitiesOnly yes\r\n```\r\n\r\nYou'll realize that `github.com-foo` and `github.com-bar` look invalid hosts, but actually they are treated as aliases. SSH maps it with the `HostName` option and uses the private key in the `IdentityFile` option.\r\n\r\n### Changing GitHub settings\r\n\r\nLet's say that the `foo` account accesses a GitHub repose whose URL is `github.com/foo/a-foo-repos`. Go to its cloned folder, and change the `.git/config` file as below.\r\n\r\nIt's worth noting that the SSH host `github.com-foo` created in the previous step is used:\r\n\r\n```shell\r\n[remote \"origin\"]\r\n  url = git@github.com-foo:foo/a-foo-repos.git\r\n```\r\n\r\nApply the similar settings for the `bar` repositories.\r\n","slug":"use-multiple-ssh-keys-for-different-github-accounts","title":"Use multiple SSH keys for different GitHub accounts","topics":"Git"},{"category":"Tip","content":"\r\n`nth-child` is used to choose a child or a range of children of a given element.\r\nUsing negative `nth-child` will pick the first few children.\r\n\r\nIn the following example, the first three items will be underlined. The range of second to fifth items have the blue color.\r\n\r\n```css\r\nli:nth-child(-n + 3) {\r\n    text-decoration: underline;\r\n}\r\nli:nth-child(n + 2):nth-child(-n + 5) {\r\n    color: #2563eb;\r\n}\r\n```\r\n\r\nIn a similar way, nagative `nth-last-child` will pick the last few children.\r\n\r\n```css\r\n/* Add a decorative line to the last two items */\r\nli:nth-last-child(-n + 2) {\r\n    text-decoration-line: line-through;\r\n}\r\n```\r\n\r\n### Demo\r\n\r\n:demo[]{title=\"Use negative nth-child and nth-last-child\" url=\"/demo/use-negative-nth-child-and-nth-last-child/index.html\"}\r\n\r\n### See also\r\n\r\n-   [Append leading zeros to ordered list items](/append-leading-zeros-to-ordered-list-items.html)\r\n","slug":"use-negative-nth-child-and-nth-last-child","title":"Use negative nth-child and nth-last-child","topics":"CSS"},{"category":"Tip","content":"\r\nIf you want to execute a function when a condition matches, then use short-circuit to shorten the code:\r\n\r\n```js\r\nif (formValid) {\r\n    submitForm();\r\n}\r\n\r\n// Use short-circuit\r\nformValid && submitForm();\r\n```\r\n\r\nThe logical OR operator `||` is used in a simliar way:\r\n\r\n```js\r\n!formValid || submitForm();\r\n```\r\n\r\nIn the modern web frameworks, we can use the similar syntax to render a given component when a condition satisfies.\r\nThe following sample code gives you the idea of [conditional rendering](https://reactjs.org/docs/conditional-rendering.html) in [React](https://reactjs.org):\r\n\r\n```jsx\r\n{\r\n    unreadMessages.length > 0 && <div>You have {unreadMessages.length} unread messages.</div>;\r\n}\r\n```\r\n","slug":"use-short-circuits-conditionals","title":"Use short-circuits conditionals","topics":"JavaScript"},{"category":"Best practice","content":"\r\nLet's say that we have the following TypeScript enum:\r\n\r\n```js\r\nenum Theme {\r\n    DEFAULT,\r\n    LIGHT,\r\n    DARK,\r\n}\r\n```\r\n\r\nIf you don't set the values for enum, they will be set to incremental numbers by default.\r\n\r\nSo `Theme.DEFAULT`, `Theme.LIGHT` and `Theme.DARK` will take the value of 0, 1, 2, respectively. It is more hard to debug:\r\n\r\n```js\r\nconsole.log(Theme.DARK); // 2\r\n```\r\n\r\nEven if we set the number for enum values, it is still possible for us to set an invalid value for a variable whose type is the enum:\r\n\r\n```js\r\nenum Theme {\r\n    DEFAULT = 0,\r\n    LIGHT = 1,\r\n    DARK = 2,\r\n}\r\n\r\n// TypeScript doesn't throw errors\r\nconst theme: Theme.DEFAULT = 3;\r\n```\r\n\r\nDue to these reasons, it's advised to use string literals for the enum values. The `Theme` enum should look like as follow:\r\n\r\n```js\r\nenum Theme {\r\n    DEFAULT = 'Default',\r\n    LIGHT = 'Light',\r\n    DARK = 'Dark',\r\n}\r\n\r\nconsole.log(Theme.DARK);                // 'Dark'\r\nlet theme: Theme.DEFAULT = 'Default';   // ERROR\r\n```\r\n","slug":"use-string-literals-for-the-typescript-enum-values","title":"Use string literals for the TypeScript enum values","topics":"TypeScript"},{"category":"Best practice","content":"\r\nThere are some ways to concatenate variables in a string. It's recommended to use template literal syntax to avoid unexpected result when the types of variables vary.\r\n\r\n```js\r\nconst foo = 4;\r\nconst bar = 2;\r\nconst fuzz = 'Fuzz';\r\n\r\n// Bad: Use + operator\r\nfoo + bar + fuzz; // '6Fuzz'\r\n\r\n// Better: Use concat\r\n''.concat(foo, bar, fuzz); // 42Fuzz\r\n[foo, bar, fuzz].join(''); // 42Fuzz\r\n\r\n// Best: Use template literal\r\n`${foo}${bar}${fuzz}`; // 42Fuzz\r\n```\r\n\r\n### See also\r\n\r\n-   [Create a multiline strings](/create-a-multiline-strings.html)\r\n-   [Get rid of escaping quotes with template literal](/get-rid-of-escaping-quotes-with-template-literal.html)\r\n-   [Prevent a string from being escaped](/prevent-a-string-from-being-escaped.html)\r\n","slug":"use-template-literal-to-concatenate-strings","title":"Use template literal to concatenate strings","topics":"JavaScript"},{"category":"Best practice","content":"\r\nYou probably know that the semantic `<time>` tag can be used to display a date or time. It's recommended to use it with the `datetime` attribute which brings some benefits:\r\n\r\n-   Search engines produce better results\r\n-   It can be used by some devices allowing you to add a reminder or calendar event easily\r\n\r\n```html\r\n<div>The meeting will start at <time>09:00</time></div>\r\n\r\n<!-- Better -->\r\n<div>The meeting will start at <time datetime=\"09:00\">09:00</time></div>\r\n```\r\n","slug":"use-the-datetime-attribute-when-displaying-dates-times","title":"Use the datetime attribute when displaying dates, times","topics":"HTML"},{"category":"Best practice","content":"\r\nWhen checking whether two given variables equal to each other, always use the strict equality (`===`) instead of the equality (`==`) operator.\r\n\r\nThe `===` operator not only checks the values, but also the types of variables. It's safer then `==` which performs type conversions before comparing the values.\r\n\r\n```js\r\n0 == false; // true\r\n0 === false; // false\r\n\r\n0 == []; // true\r\n0 === []; // false\r\n\r\n0 == ''; // true\r\n0 === ''; // false\r\n```\r\n\r\nYou can take a look at [== vs ===](https://thisthat.dev/equality-operator-vs-strict-equality-operator) to see more examples.\r\n","slug":"use-the-strict-equality-operator-when-comparing-variables","title":"Use the strict equality operator when comparing variables","topics":"JavaScript"},{"category":"Tip","content":"\r\nA browser might break a long text at unexpected places. For example, the specific path (`/this/is/.../folder`) in the following text is placed at the second line:\r\n\r\n```html\r\n┌───────────────────────────────────────────────────────┐ | Copy file to the folder: | |\r\n/this/is/a/very/long/path/to/the/destination/folder | └───────────────────────────────────────────────────────┘\r\n```\r\n\r\nTo prevent this behavior, HTML5 provides the `<wbr>` element. It stands for _Word Break Opportunity_, and is used to specify the positions that a line break would be created.\r\n\r\nGetting back to the example above. If we use `<wbr>` elements right before each path separator (`\\`) as follow:\r\n\r\n```html\r\nCopy your file to the folder: <wbr />/this <wbr />/is <wbr />/a ... <wbr />/destination <wbr />/folder\r\n```\r\n\r\nThe browser will break the paths in between the directory names:\r\n\r\n```html\r\n┌───────────────────────────────────────────────────────┐ | Copy your file to the folder: /this/is/a/very/long | |\r\n/path/to/the/destination/folder | └───────────────────────────────────────────────────────┘\r\n```\r\n","slug":"use-the-wbr-tags-to-represent-path","title":"Use the wbr tags to represent path","topics":"HTML"},{"category":"Tip","content":"\r\nWe can use underscores (`_`) to make a long number more readable:\r\n\r\n```js\r\nconst num = 100000000;\r\n\r\n// This is more easy to read\r\nconst num = 100_000_000;\r\n```\r\n","slug":"use-underscores-to-represent-a-number","title":"Use underscores to represent a number","topics":"JavaScript"},{"category":"Tip","content":"\r\nValidating user input against specific rules is a common thing when we work with input fields. Without using an external [validation library](https://formvalidation.io), we can use some built-in HTML 5 inputs to strict the value.\r\n\r\nSpecifically, the following input types force user to enter valid characters:\r\n\r\n| Input type      | Description                                                                                    |\r\n| --------------- | ---------------------------------------------------------------------------------------------- |\r\n| `type=\"color\"`  | Only accepts a [color](https://formvalidation.io/guide/validators/color)                       |\r\n| `type=\"date\"`   | Only accepts a [date](https://formvalidation.io/guide/validators/date)                         |\r\n| `type=\"email\"`  | Only accepts a valid [email address](https://formvalidation.io/guide/validators/email-address) |\r\n| `type=\"number\"` | Only accepts a [number](https://formvalidation.io/guide/validators/integer)                    |\r\n| `type=\"tel\"`    | Only accepts a [phone number](https://formvalidation.io/guide/validators/phone)                |\r\n| `type=\"url\"`    | Only accepts a [URL](https://formvalidation.io/guide/validators/uri)                           |\r\n\r\nAlthough these input types are useful, they can't serve the cases that the input must match a given regular expression.\r\n\r\nFor example, how we can force user to enter exactly 10 digits of a phone number when using the `type=\"tel\"` attribute. That's where the `pattern` attribute comes in.\r\n\r\nThe sample code below solves the issue mentioned earlier:\r\n\r\n```html\r\n<input type=\"tel\" pattern=\"^\\d{10}$\" title=\"Please enter 10 digits\" />\r\n```\r\n\r\nIt's recommended to use the `title` attribute, so users know what the correct value is.\r\n","slug":"validate-an-input-value-with-the-pattern-attribute","title":"Validate an input value with the pattern attribute","topics":"HTML"},{"category":"Tip","content":"\r\nWe can use the following command to see the content of a particular file on another branch:\r\n\r\n```shell\r\n$ git show branch:file\r\n```\r\n\r\n-   `branch` represents the name of destination branch\r\n-   `file` represents the relative path of the file\r\n\r\nFor example, `git show feature/tip:css/styles.css` shows the content of the file located at `css/styles.css` in the `feature/tip` branch.\r\n\r\nYou also can open the file in your favourite editor, Vim for example:\r\n\r\n```shell\r\n$ git show branch:file | vim -\r\n```\r\n","slug":"view-a-file-in-a-different-branch-without-switching-the-branch","title":"View a file in a different branch without switching the branch","topics":"Git"},{"category":"Tip","content":"\r\nThe CSS styles used in the print mode can be defined using the `print` media type:\r\n\r\n```css\r\n@media print {\r\n  ...\r\n}\r\n```\r\n\r\nHowever, we can't see these styles under the _Styles_ panel in Chrome DevTools. In order to debug the print styles, we have to force the current page into the print preview mode.\r\n\r\n-   In DevTools, click the vertical dots icon at the right, and choose _More tools_ > _Rendering_\r\n-   In the _Emulate CSS media type_ section, choose _print_\r\n\r\nUnder the _Styles_ panel, DevTools will show the print styles for the selected element if there are. In the following screenshot, you will see the print styles of `.rpv-print-page-thumbnail` elements.\r\n\r\n![Emulate print CSS](/img/emulate-print-css.png)\r\n","slug":"view-print-stylesheets-with-chrome-devtools","title":"View print stylesheets with Chrome DevTools","topics":"DevTools"},{"category":"Trick","content":"\r\nThe outline property is useful when you want to visualize elements on the page. In the following sample code, we iterate over all the elements and set the `outline` property with a [random hex color](https://1loc.dev/#generate-a-random-hex-color):\r\n\r\n```js\r\nconst randomColor = () => `#${Math.random().toString(16).slice(2, 8).padEnd(6, '0')}`;\r\n\r\n[].forEach.call(document.querySelectorAll('*'), (ele) => (ele.style.outline = `1px solid ${randomColor()}`));\r\n```\r\n\r\nOf course, you will need an opposite command to reset the `outline` property:\r\n\r\n```js\r\n[].forEach.call(document.querySelectorAll('*'), (ele) => ele.style.removeProperty('outline'));\r\n```\r\n\r\nYou can change the selector from `*` to whatever you want to match the set of particular elements, for example:\r\n\r\n```js\r\n// Set the outline for links only\r\n[].forEach.call(\r\n    document.querySelectorAll('a'),\r\n    ...\r\n);\r\n```\r\n","slug":"visualize-elements-on-page-with-the-outline-style","title":"Visualize elements on page with the outline style","topics":"DOM, JavaScript"},{"category":"Tip","content":"\r\n_Live expressions_ allows us to watch a JavaScript expression over time. The expression is evaluated and pinned at the top of the _Console_. It shows the value of expression in real-time.\r\n\r\nIt's very useful in some use cases such as\r\n\r\n-   Track CSS properties that are changed during an animation\r\n-   Track the [current active element](/track-the-focused-element-with-chrome-devtools.html)\r\n-   See the values of variables in real time without logging them\r\n\r\nFor example, when using the `console.log` function inside the handlers of the `mousemove`, `scroll` events, we can see a lot of logged values in the Console. It's not easy for us to scan the values when the event occurs.\r\n\r\n```js\r\nwindow.addEventListener('scroll', (e) => {\r\n    console.log(window.scrollY);\r\n});\r\n```\r\n\r\n<video loop muted controls>\r\n  <source src=\"/img/busy-console.mp4\" type=\"video/mp4\">\r\n</video>\r\n\r\nUsing live expressions can help us get rid of the issue. To use it, click the eye icon under the _Console_. Enter the variable that you want to watch in the textbox, and click outside of the textbox to save it. You can add as many expressions as you want.\r\n\r\nFrom now on, you'll see the new value of expression whenever it changes.\r\n\r\n<video loop muted controls>\r\n  <source src=\"/img/live-expressions.mp4\" type=\"video/mp4\">\r\n</video>\r\n\r\n### See also\r\n\r\n-   [Track the focused element with Chrome DevTools](/track-the-focused-element-with-chrome-devtools.html)\r\n","slug":"watch-a-variable-value-with-live-expressions","title":"Watch a variable's value with live expressions","topics":"DevTools"},{"category":"Best practice","content":"\r\nIf the inline arrow function consists of the `<`, `<=`, `>` or `>=` operator, it is advised to wrap the function body in parentheses.\r\n\r\nLooking at the two versions below, it is easy for the first variant to cause a misleading.\r\n\r\n```js\r\n// Bad\r\nconst compareToZero = (a) => (a <= 0 ? 0 : a);\r\n\r\n// Good\r\nconst compareToZero = (a) => (a <= 0 ? 0 : a);\r\n```\r\n","slug":"wrap-arrow-function-body-in-parentheses","title":"Wrap arrow function body in parentheses","topics":"JavaScript"},{"category":"Trick","content":"\r\nIf you want to add a few CSS rules that fix issues on Firefox only, then this trick might be useful.\r\nIt introduces two ways to detect Firefox:\r\n\r\n```css\r\n@-moz-document url-prefix() {\r\n    h1 {\r\n        color: blue;\r\n    }\r\n}\r\n\r\n/* Or use `@support` */\r\n@supports (-moz-appearance: none) {\r\n    h1 {\r\n        color: blue;\r\n    }\r\n}\r\n```\r\n\r\nThe sample code above will add the blue color to `h1` on Firefox.\r\n","slug":"write-css-rules-for-firefox-only","title":"Write CSS rules for Firefox only","topics":"CSS"}]},"__N_SSG":true}