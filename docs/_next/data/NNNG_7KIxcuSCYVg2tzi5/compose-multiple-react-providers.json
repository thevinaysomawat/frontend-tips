{"pageProps":{"content":"\r\nNowadays, it is common to use React's context at the root of an application to manage a shared state between any components.\r\n\r\nFor example, checking whether or not the current user has logged in might be accomplished by the `AuthProvider` provider:\r\n\r\n```js\r\nconst App = () => {\r\n    return (\r\n        <AuthProvider>\r\n            {...}\r\n        </AuthProvider>\r\n    );\r\n};\r\n```\r\n\r\nUsing multiple providers could make the code harder to read because there are a lot of nested components:\r\n\r\n```js\r\nconst App = () => {\r\n    return (\r\n        <Router>\r\n            <AuthProvider>\r\n                <ThemeProvider>\r\n                    <LocalizationProvider>\r\n                        {...}\r\n                    </LocalizationProvider>\r\n                </ThemeProvider>\r\n            </AuthProvider>\r\n        </Router>\r\n    );\r\n};\r\n```\r\n\r\nThe providers can be composed together by using the `reduce` function:\r\n\r\n```js\r\nconst compose = (providers) =>\r\n    providers.reduce((Prev, Curr) => ({ children }) => (\r\n        <Prev>\r\n            <Curr>{children}</Curr>\r\n        </Prev>\r\n    ));\r\n```\r\n\r\nThe provider declarations in the root can be shorten as below:\r\n\r\n```js\r\nconst Provider = compose([\r\n    Router,\r\n    AuthProvider,\r\n    ThemeProvider,\r\n    LocalizationProvider,\r\n]);\r\n\r\nconst App = () => {\r\n    return (\r\n        <Provider>\r\n            {...}\r\n        </Provider>\r\n    );\r\n};\r\n```\r\n","frontMatter":{"title":"Compose multiple React providers","category":"Tip","date":"2021-05-13 20:36:00 +7","topics":"React","metadata":{"image":"compose-react-providers.png"}},"prevPost":{"slug":"combine-styles-with-the-is-pseudo-class-selector","title":"Combine styles with the :is pseudo-class selector"},"nextPost":{"slug":"conditional-logging-in-the-console","title":"Conditional logging in the Console"}},"__N_SSG":true}