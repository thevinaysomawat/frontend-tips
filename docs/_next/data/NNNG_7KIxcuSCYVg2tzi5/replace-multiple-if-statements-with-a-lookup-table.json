{"pageProps":{"content":"\r\nAssume that we are going to determine the [weekday](https://1loc.dev/#get-the-weekday-of-a-date) of a date. Given a `date` object, we can get the day of the week:\r\n\r\n```js\r\nconst day = date.getDay();\r\n```\r\n\r\nThe day is zero-based index, and starts with Sunday. It's easy to write a few `if` statements such as:\r\n\r\n```js\r\nlet weekDay = '';\r\nif (day === 0) {\r\n    weekDay = 'Sunday';\r\n} else if (day === 1) {\r\n    weekDay = 'Monday';\r\n} else if (day === 2) {\r\n    // More if statements are omitted\r\n    // ...\r\n} else if (day === 6) {\r\n    weekDay = 'Saturday';\r\n}\r\n```\r\n\r\nSince all the `if` statements above have the same left-hand side expression, we can make a better version using the `switch` statement:\r\n\r\n```js\r\n// Better version\r\nlet weekDay = '';\r\nswitch (day) {\r\n    case 0:\r\n        weekDay = 'Sunday';\r\n        break;\r\n    case 1:\r\n        weekDay = 'Monday';\r\n        break;\r\n    // More cases are omitted\r\n    //...\r\n    case 6:\r\n        weekDay = 'Saturday';\r\n        break;\r\n}\r\n```\r\n\r\nUsing the `switch` statement makes the code more readable, but it seem that the number of line-of-codes in both approaches are the same.\r\n\r\nIn pure English, we map _0_ with _Sunday_, _1_ with _Monday_, and so forth. Why don't we create a lookup table that quickly returns the matching item based on given key?\r\n\r\n```js\r\n// The best version\r\nconst lookup = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\nconst weekDay = lookup[day];\r\n```\r\n\r\nThe code is short, and only uses `const` for variable declarations meaning that it doesn't have side effects and easy to test.\r\n\r\nIn reality, a lookup table can be an array, object literal or a `Map`. The data structure varies depending on your business logic.\r\n\r\nAs long as you get the idea, the following example uses the same practice. It is a function that converts a given number to the Roman numeral representation.\r\n\r\n```js\r\nconst lookup = [\r\n    ['M', 1000],\r\n    ['CM', 900],\r\n    ['D', 500],\r\n    ['CD', 400],\r\n    ['C', 100],\r\n    ['XC', 90],\r\n    ['L', 50],\r\n    ['XL', 40],\r\n    ['X', 10],\r\n    ['IX', 9],\r\n    ['V', 5],\r\n    ['IV', 4],\r\n    ['I', 1],\r\n];\r\n\r\nconst convertToRoman = (number) =>\r\n    lookup.reduce((curr, [key, value]) => {\r\n        curr += key.repeat(Math.floor(number / value));\r\n        number = number % value;\r\n        return curr;\r\n    }, '');\r\n\r\nconvertToRoman(20); // 'XX'\r\nconvertToRoman(21); // 'XXI'\r\nconvertToRoman(2021); // 'MMXXI'\r\n```\r\n\r\n> If a function uses a fixed lookup table, it's recommended to move the lookup to outside of the function\r\n\r\n### See also\r\n\r\n-   [Early return](/early-return.html)\r\n-   [Replace multiple if statements with a single switch statement](/replace-multiple-if-statements-with-a-single-switch-statement.html)\r\n-   [Use Array.includes for multiple conditionals](/use-array-includes-for-multiple-conditionals.html)\r\n","frontMatter":{"title":"Replace multiple if statements with a lookup table","category":"Best practice","date":"2021-03-08 22:10:00 +7","topics":"JavaScript"},"prevPost":{"slug":"remove-the-border-from-the-last-navigation-item","title":"Remove the border from the last navigation item"},"nextPost":{"slug":"replace-multiple-if-statements-with-a-single-switch-statement","title":"Replace multiple if statements with a single switch statement"}},"__N_SSG":true}