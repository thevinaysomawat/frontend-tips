{"pageProps":{"content":"\r\nIf you're using jQuery to manage the events, then you're able to use `return false` within the event handler:\r\n\r\n```js\r\n$(element).on('click', function (e) {\r\n    return false;\r\n});\r\n```\r\n\r\nBefore returning the value of `false`, the handler would do something else. The problem is that if there's any runtime error occurring in the handler, we will not reach the `return false` statement at the end.\r\n\r\nIn that case, the default behavior will be taken:\r\n\r\n```js\r\n$(element).on('click', function (e) {\r\n    // Do something here, but if there's error at runtime\r\n    // ...\r\n    return false;\r\n});\r\n```\r\n\r\nWe can avoid this situation by using the `preventDefault` method before performing any custom handler:\r\n\r\n```js\r\n$(element).on('click', function (e) {\r\n    e.preventDefault();\r\n\r\n    // Do something here\r\n    // The default behavior is prevented regardless errors at runtime\r\n    // ...\r\n});\r\n```\r\n","frontMatter":{"title":"Prevent the default behavior with jQuery event handler","category":"Best practice","date":"2021-02-23 09:51:00 +7","topics":"DOM, JavaScript"},"prevPost":{"slug":"prevent-macos-from-going-to-sleep","title":"Prevent macOS from going to sleep"},"nextPost":{"slug":"pure-collapsible-element","title":"Pure collapsible element"}},"__N_SSG":true}