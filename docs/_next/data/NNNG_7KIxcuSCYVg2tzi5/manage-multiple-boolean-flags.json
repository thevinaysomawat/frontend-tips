{"pageProps":{"content":"\r\nSometimes a function has to deal with different conditions. It's not ideal to pass all of them as separated parameters.\r\n\r\nTo demonstrate the problem, let's say that we need to validate a password in a registration form. It's up to you to define differents rules for a strong password, but this example covers rules listed as following:\r\n\r\n-   Should have at least 8 characters\r\n-   Should contain at least one upper case character\r\n-   Should contain at least one lower case character\r\n-   Should contain at least one digit\r\n\r\nAs we imagine, each rule could be represented by a `boolean` parameter. The validator function looks like:\r\n\r\n```js\r\nconst validatePassword = (password, checkLength, checkUpperCase, checkLowerCase, checkDigit) => {\r\n    // returns `true` or `false`\r\n    // ...\r\n};\r\n```\r\n\r\nThe number of parameters can be increased quickly depending on the number of rules. Also, the implementation is a mess if we combine the rules together.\r\nTo fix the problem, we introduce the rule flag by different numbers. Each number is a power of 2:\r\n\r\n```js\r\nconst RULE_LENGTH = 1 << 0; // 1\r\nconst RULE_UPPER_CASE = 1 << 1; // 2\r\nconst RULE_LOWER_CASE = 1 << 2; // 4\r\nconst RULE_DIGIT = 1 << 3; // 8\r\n```\r\n\r\nWe can create a combination of rules via the bitwise (`|`) operator. Using `|` with different rule(s) will generate an unique number, because a number can be written as the sum of different power of 2.\r\n\r\n| Combination                                                       | Number |\r\n| ----------------------------------------------------------------- | ------ |\r\n| `RULE_LENGTH`                                                     | 1      |\r\n| `RULE_UPPER_CASE`                                                 | 2      |\r\n| `RULE_LENGTH \\| RULE_UPPER_CASE`                                  | 3      |\r\n| `RULE_LOWER_CASE`                                                 | 4      |\r\n| `RULE_LENGTH \\| RULE_LOWER_CASE`                                  | 5      |\r\n| `RULE_UPPER_CASE \\| RULE_LOWER_CASE`                              | 6      |\r\n| `RULE_LENGTH \\| RULE_UPPER_CASE \\| RULE_LOWER_CASE`               | 7      |\r\n| ...                                                               | ...    |\r\n| `RULE_LENGTH \\| RULE_UPPER_CASE \\| RULE_LOWER_CASE \\| RULE_DIGIT` | 15     |\r\n\r\nThe validator function can be shortent as following, where `rule` is a number:\r\n\r\n```js\r\n// The default rule should cover all the cases\r\nconst RULE_DEFAULT = RULE_LENGTH | RULE_UPPER_CASE | RULE_LOWER_CASE | RULE_DIGIT; // 15\r\n\r\nconst validatePassword = (password, rule = RULE_DEFAULT) => {};\r\n```\r\n\r\nYou just need to pass the required rules instead of indicating all of them:\r\n\r\n```js\r\n// Only check the length rule\r\nvalidatePassword(password, RULE_LENGTH);\r\n\r\n// Check length and upper case rules\r\nvalidatePassword(password, RULE_LENGTH | RULE_UPPER_CASE);\r\n```\r\n\r\nFrom the `rule` number, we can know whether a given rule is enabled by using the `&` operator:\r\n\r\n```js\r\nconst validatePassword = (password, rule = RULE_DEFAULT) => {\r\n    // `RULE_LENGTH` is enabled\r\n    if (rule & RULE_LENGTH && password.length < 8) {\r\n        return false;\r\n    }\r\n\r\n    if (rule & RULE_UPPER_CASE && password === value.toUpperCase()) {\r\n        return false;\r\n    }\r\n\r\n    if (rule & RULE_LOWER_CASE && password === value.toLowerCase()) {\r\n        return false;\r\n    }\r\n\r\n    if (rule & RULE_DIGIT && password.search(/[0-9]/) < 0) {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n};\r\n```\r\n\r\n### See also\r\n\r\n-   [Avoid boolean parameters](/avoid-boolean-parameters.html)\r\n","frontMatter":{"title":"Manage multiple boolean flags","category":"Tip","date":"2021-02-25 14:36:00 +7","topics":"JavaScript"},"prevPost":{"slug":"make-a-table-with-equal-column-widths","title":"Make a table with equal column widths"},"nextPost":{"slug":"merge-different-arrays","title":"Merge different arrays"}},"__N_SSG":true}