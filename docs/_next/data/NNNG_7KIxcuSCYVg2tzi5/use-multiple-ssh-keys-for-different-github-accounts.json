{"pageProps":{"content":"\r\nRather than entering the username and password, you often use SSH keys to access GitHub repositories. It's a more secured and recommended way to communicate with remote GitHub servers.\r\n\r\nSometimes you have more than one GitHub account. For example, one for accessing personal repositories, another one for your daily works.\r\n\r\nThe question is how your local Git recogranizes a repository that comes with which GitHub account. This tip will help you.\r\n\r\n### Creating different keys\r\n\r\nAssume that `foo` and `bar` are two GitHub usernames that you would like to use in the same computer. You can follow the official GitHub guide to [generate SSH key](https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent).\r\n\r\n```shell\r\n// Generate SSH key for `foo`\r\n$ ssh-keygen -t ed25519 -C \"foo@domain.com\"\r\n```\r\n\r\nWhen you're asked to indicate the file to save the key, don't use the default key. Change the name of file to something associate with the account, for example:\r\n\r\n```shell\r\nEnter a file in which to save the key (/home/you/.ssh/id_ed25519):\r\n`/home/you/.ssh/id_foo`\r\n```\r\n\r\nRepeat the same steps for the `bar` account. Now, we have two private keys, `id_foo` and `id_bar` located at the `~/.ssh` folder.\r\n\r\n### Adding keys to SSH agent\r\n\r\n```shell\r\n// Delete cached keys\r\n$ ssh-add -D\r\n\r\n// Start the ssh-agent in the background\r\n$ eval \"$(ssh-agent -s)\"\r\n\r\n// Add your SSH private keys to the ssh-agent\r\n$ ssh-add ~/.ssh/id_foo\r\n$ ssh-add ~/.ssh/id_bar\r\n```\r\n\r\n### Mapping keys to GitHub repos\r\n\r\nThis step lets SSH know which private key should be used for particular hosts.\r\n\r\n```shell\r\n$ cd ~/.ssh\r\n$ touch config\r\n```\r\n\r\nAdd the following content to the `config` file:\r\n\r\n```shell\r\nHost github.com-foo\r\n  HostName github.com\r\n  User git\r\n  IdentityFile ~/.ssh/id_foo\r\n  IdentitiesOnly yes\r\n\r\nHost github.com-bar\r\n  HostName github.com\r\n  User git\r\n  IdentityFile ~/.ssh/id_bar\r\n  IdentitiesOnly yes\r\n```\r\n\r\nYou'll realize that `github.com-foo` and `github.com-bar` look invalid hosts, but actually they are treated as aliases. SSH maps it with the `HostName` option and uses the private key in the `IdentityFile` option.\r\n\r\n### Changing GitHub settings\r\n\r\nLet's say that the `foo` account accesses a GitHub repose whose URL is `github.com/foo/a-foo-repos`. Go to its cloned folder, and change the `.git/config` file as below.\r\n\r\nIt's worth noting that the SSH host `github.com-foo` created in the previous step is used:\r\n\r\n```shell\r\n[remote \"origin\"]\r\n  url = git@github.com-foo:foo/a-foo-repos.git\r\n```\r\n\r\nApply the similar settings for the `bar` repositories.\r\n","frontMatter":{"title":"Use multiple SSH keys for different GitHub accounts","category":"Tip","date":"2021-04-19 09:57:00 +7","topics":"Git","metadata":{"image":"multiple-ssh-keys.png"}},"prevPost":{"slug":"use-documentfragments-when-adding-a-big-list-of-elements","title":"Use DocumentFragments when adding a big list of elements"},"nextPost":{"slug":"use-negative-nth-child-and-nth-last-child","title":"Use negative nth-child and nth-last-child"}},"__N_SSG":true}